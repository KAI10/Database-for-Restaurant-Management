/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package guidesign;

import java.sql.CallableStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/**
 *
 * @author KAI10
 */
public class ALL extends javax.swing.JFrame {

    /**
     * Creates new form ALL
     */
    connectOracle connectOracle;
    int curDepartment;
    String curUserName;
    String gQuery;

    ArrayList<Integer> amountItem;
    ArrayList<String> items;

    String extremeQueryPrefix = "", extremeQuerySuffix = "", extremeQuery = "";
    String qTemplate1, qTemplate2;

    boolean queryAnd = false;

    public ALL() {
        super("Restaurant Management Database");
        connectOracle = new connectOracle();
        amountItem = new ArrayList<>();
        items = new ArrayList<>();

        qTemplate1 = " FROM( SELECT RE.*, RJ.*, RD.* FROM \"rEmployee\" re, \"rJob\" rj, \"rDepartment\" RD"
                + " WHERE RE.\"job_id\" = RJ.\"job_id\" and RE.\"dept_id\" = RD.\"dept_id\") SuperTable1 ";

        qTemplate2 = " FROM(SELECT RB.*, RC.\"quantity\" as qty, RF.\"food_name\" as fName, RF.\"food_price\" as UPrice "
                + "FROM \"rBills\" RB, \"rConsumption\" RC, \"rFoodItem\" RF "
                + "WHERE RB.\"bill_id\" = RC.\"bill_id\" AND RC.\"food_id\" = RF.\"food_id\") SuperTable2 ";

        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        loginForm = new javax.swing.JPanel();
        username = new javax.swing.JTextField();
        jLabel20 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        password = new javax.swing.JPasswordField();
        login = new javax.swing.JButton();
        isAdmin = new javax.swing.JCheckBox();
        showCrdit = new javax.swing.JButton();
        optionsManagement = new javax.swing.JPanel();
        insertManagement = new javax.swing.JComboBox<>();
        jLabel31 = new javax.swing.JLabel();
        updateManagement = new javax.swing.JComboBox<>();
        jLabel32 = new javax.swing.JLabel();
        deleteManagement = new javax.swing.JComboBox<>();
        jLabel33 = new javax.swing.JLabel();
        queryManagement = new javax.swing.JComboBox<>();
        jLabel34 = new javax.swing.JLabel();
        LogOutManagement = new javax.swing.JButton();
        chPasswordMan = new javax.swing.JButton();
        optionsWaitStuff = new javax.swing.JPanel();
        insertWaitStuff = new javax.swing.JComboBox<>();
        jLabel27 = new javax.swing.JLabel();
        updateWaitStuff = new javax.swing.JComboBox<>();
        jLabel28 = new javax.swing.JLabel();
        deleteWaitStuff = new javax.swing.JComboBox<>();
        jLabel29 = new javax.swing.JLabel();
        queryWaitStuff = new javax.swing.JComboBox<>();
        jLabel30 = new javax.swing.JLabel();
        LogOutWaitStuff = new javax.swing.JButton();
        chPasswordWS = new javax.swing.JButton();
        optionsKitchen = new javax.swing.JPanel();
        insertKitchen = new javax.swing.JComboBox<>();
        jLabel10 = new javax.swing.JLabel();
        updateKitchen = new javax.swing.JComboBox<>();
        jLabel24 = new javax.swing.JLabel();
        deleteKitchen = new javax.swing.JComboBox<>();
        jLabel25 = new javax.swing.JLabel();
        queryKitchen = new javax.swing.JComboBox<>();
        jLabel26 = new javax.swing.JLabel();
        LogOutKitchen = new javax.swing.JButton();
        chPasswordKitchen = new javax.swing.JButton();
        options = new javax.swing.JPanel();
        insert = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        update = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        delete = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        query = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        ViewLogs = new javax.swing.JButton();
        LogOut = new javax.swing.JButton();
        prevIncome = new javax.swing.JComboBox<>();
        jLabel48 = new javax.swing.JLabel();
        changePass = new javax.swing.JButton();
        insertFormFood = new javax.swing.JPanel();
        f_name = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        f_price = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        category = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        submitF = new javax.swing.JButton();
        backF = new javax.swing.JButton();
        insertFormEmp = new javax.swing.JPanel();
        e_name = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        address = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        contactNO = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        submitE = new javax.swing.JButton();
        backE = new javax.swing.JButton();
        assignJob = new javax.swing.JComboBox<>();
        dept_name_admin = new javax.swing.JComboBox<>();
        getDepartment = new javax.swing.JLabel();
        deleteFormEmp = new javax.swing.JPanel();
        e_id_del = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        e_name_del = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        departmentName_del = new javax.swing.JTextField();
        jLabel21 = new javax.swing.JLabel();
        jobName_del = new javax.swing.JTextField();
        jLabel22 = new javax.swing.JLabel();
        deleteE = new javax.swing.JButton();
        back_delE = new javax.swing.JButton();
        deleteFormFood = new javax.swing.JPanel();
        f_id_del = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        f_name_del = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        deleteF = new javax.swing.JButton();
        back_delF = new javax.swing.JButton();
        insertFormBills = new javax.swing.JPanel();
        item = new javax.swing.JComboBox<>();
        amount = new javax.swing.JTextField();
        addB = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        jLabel35 = new javax.swing.JLabel();
        submitB = new javax.swing.JButton();
        backB = new javax.swing.JButton();
        deleteFormBills = new javax.swing.JPanel();
        billID = new javax.swing.JTextField();
        jLabel36 = new javax.swing.JLabel();
        backDelB = new javax.swing.JButton();
        dayB = new javax.swing.JComboBox<>();
        monB = new javax.swing.JComboBox<>();
        yearB = new javax.swing.JComboBox<>();
        jLabel37 = new javax.swing.JLabel();
        backDelBill = new javax.swing.JButton();
        queryFormEmp = new javax.swing.JPanel();
        jLabel38 = new javax.swing.JLabel();
        emp_id = new javax.swing.JCheckBox();
        emp_name = new javax.swing.JCheckBox();
        emp_address = new javax.swing.JCheckBox();
        emp_contactno = new javax.swing.JCheckBox();
        emp_hire_date = new javax.swing.JCheckBox();
        emp_dept_name = new javax.swing.JCheckBox();
        emp_job_name = new javax.swing.JCheckBox();
        emp_manager_name = new javax.swing.JCheckBox();
        emp_sal = new javax.swing.JCheckBox();
        condQemp = new javax.swing.JComboBox<>();
        jLabel39 = new javax.swing.JLabel();
        condRelQemp = new javax.swing.JComboBox<>();
        addCondQemp = new javax.swing.JButton();
        showQemp = new javax.swing.JButton();
        backQemp = new javax.swing.JButton();
        QempInput = new javax.swing.JTextField();
        jLabel40 = new javax.swing.JLabel();
        queryFormFood = new javax.swing.JPanel();
        jLabel42 = new javax.swing.JLabel();
        addCondFood = new javax.swing.JButton();
        condQfood = new javax.swing.JComboBox<>();
        jLabel43 = new javax.swing.JLabel();
        jLabel44 = new javax.swing.JLabel();
        QfoodInput = new javax.swing.JTextField();
        condRelQfood = new javax.swing.JComboBox<>();
        showQfood = new javax.swing.JButton();
        backQfood = new javax.swing.JButton();
        F_id = new javax.swing.JCheckBox();
        F_name = new javax.swing.JCheckBox();
        F_price = new javax.swing.JCheckBox();
        F_category = new javax.swing.JCheckBox();
        queryFormBill = new javax.swing.JPanel();
        jLabel45 = new javax.swing.JLabel();
        addCondBill = new javax.swing.JButton();
        jLabel46 = new javax.swing.JLabel();
        condQbill = new javax.swing.JComboBox<>();
        QbillInput = new javax.swing.JTextField();
        jLabel47 = new javax.swing.JLabel();
        condRelQbill = new javax.swing.JComboBox<>();
        showQbill = new javax.swing.JButton();
        backQbill = new javax.swing.JButton();
        brief = new javax.swing.JCheckBox();
        details = new javax.swing.JCheckBox();
        updateFormEmp = new javax.swing.JPanel();
        updateInfoEmp = new javax.swing.JComboBox<>();
        updateCondEmpName = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        updateInfoEmpText = new javax.swing.JTextField();
        submitUEmp = new javax.swing.JButton();
        backUEmp = new javax.swing.JButton();
        updateFormFood = new javax.swing.JPanel();
        jLabel13 = new javax.swing.JLabel();
        updateCondFoodName = new javax.swing.JTextField();
        updateInfoFood = new javax.swing.JComboBox<>();
        updateInfoFoodText = new javax.swing.JTextField();
        submitUFood = new javax.swing.JButton();
        backUFood = new javax.swing.JButton();
        updateFormJob = new javax.swing.JPanel();
        jLabel41 = new javax.swing.JLabel();
        updateCondJobName = new javax.swing.JTextField();
        updateInfoJob = new javax.swing.JComboBox<>();
        updateInfoJobText = new javax.swing.JTextField();
        submitUJob = new javax.swing.JButton();
        backUJob = new javax.swing.JButton();
        changePasswordForm = new javax.swing.JPanel();
        jLabel49 = new javax.swing.JLabel();
        curPassword = new javax.swing.JPasswordField();
        jLabel50 = new javax.swing.JLabel();
        newPassword = new javax.swing.JPasswordField();
        submitPass = new javax.swing.JButton();
        backPass = new javax.swing.JButton();
        insertFormItem = new javax.swing.JPanel();
        jLabel51 = new javax.swing.JLabel();
        item_name_text = new javax.swing.JTextField();
        jLabel52 = new javax.swing.JLabel();
        item_price_text = new javax.swing.JTextField();
        jLabel53 = new javax.swing.JLabel();
        item_quantity_text = new javax.swing.JTextField();
        submitI = new javax.swing.JButton();
        backI = new javax.swing.JButton();
        itemDeptChoice = new javax.swing.JComboBox<>();
        jLabel54 = new javax.swing.JLabel();
        deleteFormItem = new javax.swing.JPanel();
        jLabel55 = new javax.swing.JLabel();
        i_name_del = new javax.swing.JTextField();
        deleteI = new javax.swing.JButton();
        back_delI = new javax.swing.JButton();
        queryFormItem = new javax.swing.JPanel();
        jLabel56 = new javax.swing.JLabel();
        addCondItem = new javax.swing.JButton();
        condQItem = new javax.swing.JComboBox<>();
        jLabel57 = new javax.swing.JLabel();
        jLabel58 = new javax.swing.JLabel();
        QitemInput = new javax.swing.JTextField();
        showQitem = new javax.swing.JButton();
        backQitem = new javax.swing.JButton();
        item_id = new javax.swing.JCheckBox();
        item_name = new javax.swing.JCheckBox();
        item_price = new javax.swing.JCheckBox();
        item_quantity = new javax.swing.JCheckBox();
        item_dept = new javax.swing.JCheckBox();
        updateFormItem = new javax.swing.JPanel();
        jLabel59 = new javax.swing.JLabel();
        updateCondItemName = new javax.swing.JTextField();
        submitUItem = new javax.swing.JButton();
        backUItem = new javax.swing.JButton();
        updateQuantityItem = new javax.swing.JComboBox<>();
        updateQuantityText = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new java.awt.CardLayout());

        loginForm.setBackground(new java.awt.Color(51, 51, 51));

        jLabel20.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel20.setForeground(new java.awt.Color(204, 204, 204));
        jLabel20.setText("Username:");

        jLabel23.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel23.setForeground(new java.awt.Color(204, 204, 204));
        jLabel23.setText("Password:");

        login.setText("Login");
        login.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginActionPerformed(evt);
            }
        });

        isAdmin.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        isAdmin.setForeground(new java.awt.Color(204, 204, 204));
        isAdmin.setText("Admin");

        showCrdit.setText("CREDITS");
        showCrdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showCrditActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout loginFormLayout = new javax.swing.GroupLayout(loginForm);
        loginForm.setLayout(loginFormLayout);
        loginFormLayout.setHorizontalGroup(
            loginFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(loginFormLayout.createSequentialGroup()
                .addGroup(loginFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(loginFormLayout.createSequentialGroup()
                        .addGap(201, 201, 201)
                        .addGroup(loginFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel20)
                            .addComponent(jLabel23))
                        .addGap(59, 59, 59)
                        .addGroup(loginFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(username, javax.swing.GroupLayout.DEFAULT_SIZE, 174, Short.MAX_VALUE)
                            .addComponent(password)))
                    .addGroup(loginFormLayout.createSequentialGroup()
                        .addGap(224, 224, 224)
                        .addComponent(isAdmin)
                        .addGap(168, 168, 168)
                        .addComponent(login, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(loginFormLayout.createSequentialGroup()
                        .addGap(350, 350, 350)
                        .addComponent(showCrdit, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(259, Short.MAX_VALUE))
        );
        loginFormLayout.setVerticalGroup(
            loginFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(loginFormLayout.createSequentialGroup()
                .addGap(117, 117, 117)
                .addGroup(loginFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(username, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel20))
                .addGap(18, 18, 18)
                .addGroup(loginFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel23)
                    .addComponent(password, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(106, 106, 106)
                .addGroup(loginFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(isAdmin)
                    .addComponent(login, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 104, Short.MAX_VALUE)
                .addComponent(showCrdit, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(61, 61, 61))
        );

        getContentPane().add(loginForm, "card8");

        optionsManagement.setBackground(new java.awt.Color(51, 51, 51));

        insertManagement.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Employee", "Bills" }));
        insertManagement.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                insertManagementActionPerformed(evt);
            }
        });

        jLabel31.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel31.setForeground(new java.awt.Color(204, 204, 204));
        jLabel31.setText("INSERT: ");

        updateManagement.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Employee" }));
        updateManagement.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateManagementActionPerformed(evt);
            }
        });

        jLabel32.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel32.setForeground(new java.awt.Color(204, 204, 204));
        jLabel32.setText("DELETE:");

        deleteManagement.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Employee" }));
        deleteManagement.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteManagementActionPerformed(evt);
            }
        });

        jLabel33.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel33.setForeground(new java.awt.Color(204, 204, 204));
        jLabel33.setText("UPDATE:");

        queryManagement.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Employee", "Bill" }));
        queryManagement.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                queryManagementActionPerformed(evt);
            }
        });

        jLabel34.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel34.setForeground(new java.awt.Color(204, 204, 204));
        jLabel34.setText("QUERY:");

        LogOutManagement.setText("LogOut");
        LogOutManagement.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LogOutManagementActionPerformed(evt);
            }
        });

        chPasswordMan.setText("Change Password");
        chPasswordMan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chPasswordManActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout optionsManagementLayout = new javax.swing.GroupLayout(optionsManagement);
        optionsManagement.setLayout(optionsManagementLayout);
        optionsManagementLayout.setHorizontalGroup(
            optionsManagementLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(optionsManagementLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(chPasswordMan, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(92, 92, 92)
                .addComponent(LogOutManagement)
                .addGap(43, 43, 43))
            .addGroup(optionsManagementLayout.createSequentialGroup()
                .addGap(229, 229, 229)
                .addGroup(optionsManagementLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(optionsManagementLayout.createSequentialGroup()
                        .addGroup(optionsManagementLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel31, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(insertManagement, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(97, 97, 97)
                        .addGroup(optionsManagementLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(updateManagement, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel33, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel34, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(queryManagement, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(optionsManagementLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(deleteManagement, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel32, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(259, Short.MAX_VALUE))
        );
        optionsManagementLayout.setVerticalGroup(
            optionsManagementLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(optionsManagementLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(optionsManagementLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LogOutManagement, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chPasswordMan, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(60, 60, 60)
                .addGroup(optionsManagementLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel31, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel33))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(optionsManagementLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(insertManagement)
                    .addComponent(updateManagement, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(51, 51, 51)
                .addGroup(optionsManagementLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel32, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel34))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(optionsManagementLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(deleteManagement, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(queryManagement, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(185, Short.MAX_VALUE))
        );

        getContentPane().add(optionsManagement, "card2");

        optionsWaitStuff.setBackground(new java.awt.Color(51, 51, 51));
        optionsWaitStuff.setForeground(new java.awt.Color(204, 204, 204));

        insertWaitStuff.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Employee" }));
        insertWaitStuff.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                insertWaitStuffActionPerformed(evt);
            }
        });

        jLabel27.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel27.setForeground(new java.awt.Color(204, 204, 204));
        jLabel27.setText("INSERT: ");

        updateWaitStuff.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Employee" }));
        updateWaitStuff.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateWaitStuffActionPerformed(evt);
            }
        });

        jLabel28.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel28.setForeground(new java.awt.Color(204, 204, 204));
        jLabel28.setText("DELETE:");

        deleteWaitStuff.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Employee" }));
        deleteWaitStuff.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteWaitStuffActionPerformed(evt);
            }
        });

        jLabel29.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel29.setForeground(new java.awt.Color(204, 204, 204));
        jLabel29.setText("UPDATE:");

        queryWaitStuff.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Employee" }));
        queryWaitStuff.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                queryWaitStuffActionPerformed(evt);
            }
        });

        jLabel30.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel30.setForeground(new java.awt.Color(204, 204, 204));
        jLabel30.setText("QUERY:");

        LogOutWaitStuff.setText("LogOut");
        LogOutWaitStuff.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LogOutWaitStuffActionPerformed(evt);
            }
        });

        chPasswordWS.setText("Change Password");
        chPasswordWS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chPasswordWSActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout optionsWaitStuffLayout = new javax.swing.GroupLayout(optionsWaitStuff);
        optionsWaitStuff.setLayout(optionsWaitStuffLayout);
        optionsWaitStuffLayout.setHorizontalGroup(
            optionsWaitStuffLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, optionsWaitStuffLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(chPasswordWS, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(118, 118, 118)
                .addComponent(LogOutWaitStuff)
                .addGap(24, 24, 24))
            .addGroup(optionsWaitStuffLayout.createSequentialGroup()
                .addGap(200, 200, 200)
                .addGroup(optionsWaitStuffLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(insertWaitStuff, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel27, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(optionsWaitStuffLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jLabel28, javax.swing.GroupLayout.DEFAULT_SIZE, 103, Short.MAX_VALUE)
                        .addComponent(deleteWaitStuff, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(93, 93, 93)
                .addGroup(optionsWaitStuffLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(optionsWaitStuffLayout.createSequentialGroup()
                        .addComponent(jLabel30, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(optionsWaitStuffLayout.createSequentialGroup()
                        .addGroup(optionsWaitStuffLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(updateWaitStuff, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel29, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 103, Short.MAX_VALUE)
                            .addComponent(queryWaitStuff, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap(309, Short.MAX_VALUE))))
        );
        optionsWaitStuffLayout.setVerticalGroup(
            optionsWaitStuffLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(optionsWaitStuffLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(optionsWaitStuffLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LogOutWaitStuff, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chPasswordWS, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(87, 87, 87)
                .addGroup(optionsWaitStuffLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel27, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel29, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(optionsWaitStuffLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(insertWaitStuff, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(updateWaitStuff, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(43, 43, 43)
                .addGroup(optionsWaitStuffLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel28, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel30))
                .addGap(18, 18, 18)
                .addGroup(optionsWaitStuffLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(deleteWaitStuff, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
                    .addComponent(queryWaitStuff))
                .addContainerGap(147, Short.MAX_VALUE))
        );

        getContentPane().add(optionsWaitStuff, "card2");

        optionsKitchen.setBackground(new java.awt.Color(51, 51, 51));

        insertKitchen.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Employee", "Food" }));
        insertKitchen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                insertKitchenActionPerformed(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(204, 204, 204));
        jLabel10.setText("INSERT: ");

        updateKitchen.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Employee", "Food" }));
        updateKitchen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateKitchenActionPerformed(evt);
            }
        });

        jLabel24.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel24.setForeground(new java.awt.Color(204, 204, 204));
        jLabel24.setText("DELETE:");

        deleteKitchen.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Employee", "Food" }));
        deleteKitchen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteKitchenActionPerformed(evt);
            }
        });

        jLabel25.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel25.setForeground(new java.awt.Color(204, 204, 204));
        jLabel25.setText("UPDATE:");

        queryKitchen.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Employee", "Food" }));
        queryKitchen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                queryKitchenActionPerformed(evt);
            }
        });

        jLabel26.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel26.setForeground(new java.awt.Color(204, 204, 204));
        jLabel26.setText("QUERY:");

        LogOutKitchen.setText("LogOut");
        LogOutKitchen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LogOutKitchenActionPerformed(evt);
            }
        });

        chPasswordKitchen.setText("Change Password");
        chPasswordKitchen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chPasswordKitchenActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout optionsKitchenLayout = new javax.swing.GroupLayout(optionsKitchen);
        optionsKitchen.setLayout(optionsKitchenLayout);
        optionsKitchenLayout.setHorizontalGroup(
            optionsKitchenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(optionsKitchenLayout.createSequentialGroup()
                .addGap(274, 274, 274)
                .addGroup(optionsKitchenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, 103, Short.MAX_VALUE)
                    .addComponent(jLabel24, javax.swing.GroupLayout.DEFAULT_SIZE, 103, Short.MAX_VALUE)
                    .addComponent(deleteKitchen, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(insertKitchen, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(87, 87, 87)
                .addGroup(optionsKitchenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(optionsKitchenLayout.createSequentialGroup()
                        .addGroup(optionsKitchenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(optionsKitchenLayout.createSequentialGroup()
                                .addComponent(jLabel25, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(optionsKitchenLayout.createSequentialGroup()
                                .addComponent(chPasswordKitchen, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(94, 94, 94)
                                .addComponent(LogOutKitchen)))
                        .addGap(39, 39, 39))
                    .addGroup(optionsKitchenLayout.createSequentialGroup()
                        .addComponent(jLabel26, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, optionsKitchenLayout.createSequentialGroup()
                        .addGroup(optionsKitchenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(queryKitchen, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(updateKitchen, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(269, 269, 269))))
        );
        optionsKitchenLayout.setVerticalGroup(
            optionsKitchenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(optionsKitchenLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(optionsKitchenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LogOutKitchen, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chPasswordKitchen, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(91, 91, 91)
                .addGroup(optionsKitchenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel25))
                .addGap(18, 18, 18)
                .addGroup(optionsKitchenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(insertKitchen, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(updateKitchen, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(48, 48, 48)
                .addGroup(optionsKitchenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel24, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel26, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(25, 25, 25)
                .addGroup(optionsKitchenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(queryKitchen, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(deleteKitchen, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(137, 137, 137))
        );

        getContentPane().add(optionsKitchen, "card2");

        options.setBackground(new java.awt.Color(51, 51, 51));

        insert.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Employee", "Food", "Inventory" }));
        insert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                insertActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(204, 204, 204));
        jLabel1.setText("INSERT: ");

        update.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Employee", "Job", "Inventory" }));
        update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(204, 204, 204));
        jLabel2.setText("DELETE:");

        delete.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Employee", "Food", "Inventory" }));
        delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(204, 204, 204));
        jLabel3.setText("UPDATE:");

        query.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Employee", "Food", "Bill", "Inventory" }));
        query.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                queryActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(204, 204, 204));
        jLabel4.setText("QUERY:");

        ViewLogs.setText("View Logs");
        ViewLogs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ViewLogsActionPerformed(evt);
            }
        });

        LogOut.setText("LogOut");
        LogOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LogOutActionPerformed(evt);
            }
        });

        prevIncome.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "last Month", "last 15 Days", "last Week", "last Day" }));
        prevIncome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prevIncomeActionPerformed(evt);
            }
        });

        jLabel48.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel48.setForeground(new java.awt.Color(204, 204, 204));
        jLabel48.setText("See Income (upto Now)");

        changePass.setText("Change Password");
        changePass.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changePassActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout optionsLayout = new javax.swing.GroupLayout(options);
        options.setLayout(optionsLayout);
        optionsLayout.setHorizontalGroup(
            optionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(optionsLayout.createSequentialGroup()
                .addGap(187, 187, 187)
                .addGroup(optionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(update, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(insert, 0, 136, Short.MAX_VALUE))
                .addGroup(optionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(optionsLayout.createSequentialGroup()
                        .addGap(94, 94, 94)
                        .addGroup(optionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(delete, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(query, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(optionsLayout.createSequentialGroup()
                        .addGap(107, 107, 107)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, optionsLayout.createSequentialGroup()
                .addGap(131, 131, 131)
                .addComponent(ViewLogs, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 240, Short.MAX_VALUE)
                .addGroup(optionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, optionsLayout.createSequentialGroup()
                        .addComponent(changePass, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(81, 81, 81)
                        .addComponent(LogOut, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, optionsLayout.createSequentialGroup()
                        .addGroup(optionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel48)
                            .addComponent(prevIncome, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(133, 133, 133))))
        );
        optionsLayout.setVerticalGroup(
            optionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, optionsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(optionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(LogOut, javax.swing.GroupLayout.DEFAULT_SIZE, 34, Short.MAX_VALUE)
                    .addComponent(changePass, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(44, 44, 44)
                .addGroup(optionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(14, 14, 14)
                .addGroup(optionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(delete, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(insert, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(56, 56, 56)
                .addGroup(optionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, 20, Short.MAX_VALUE))
                .addGap(8, 8, 8)
                .addGroup(optionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(update, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(query, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 60, Short.MAX_VALUE)
                .addComponent(jLabel48)
                .addGap(31, 31, 31)
                .addGroup(optionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ViewLogs, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(prevIncome, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(76, 76, 76))
        );

        getContentPane().add(options, "card2");

        jLabel14.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel14.setText("Name :");

        jLabel15.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel15.setText("Price :");

        jLabel16.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel16.setText("Category :");

        submitF.setText("SUBMIT");
        submitF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitFActionPerformed(evt);
            }
        });

        backF.setText("Back");
        backF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backFActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout insertFormFoodLayout = new javax.swing.GroupLayout(insertFormFood);
        insertFormFood.setLayout(insertFormFoodLayout);
        insertFormFoodLayout.setHorizontalGroup(
            insertFormFoodLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(insertFormFoodLayout.createSequentialGroup()
                .addGroup(insertFormFoodLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(insertFormFoodLayout.createSequentialGroup()
                        .addGap(224, 224, 224)
                        .addComponent(jLabel14)
                        .addGap(54, 54, 54)
                        .addComponent(f_name, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(insertFormFoodLayout.createSequentialGroup()
                        .addGap(224, 224, 224)
                        .addComponent(jLabel15)
                        .addGap(60, 60, 60)
                        .addComponent(f_price, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(insertFormFoodLayout.createSequentialGroup()
                        .addGap(224, 224, 224)
                        .addComponent(jLabel16)
                        .addGap(40, 40, 40)
                        .addComponent(category, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(insertFormFoodLayout.createSequentialGroup()
                        .addGap(300, 300, 300)
                        .addComponent(submitF)
                        .addGap(31, 31, 31)
                        .addComponent(backF)))
                .addContainerGap(335, Short.MAX_VALUE))
        );
        insertFormFoodLayout.setVerticalGroup(
            insertFormFoodLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(insertFormFoodLayout.createSequentialGroup()
                .addGap(116, 116, 116)
                .addGroup(insertFormFoodLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel14)
                    .addComponent(f_name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(insertFormFoodLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel15)
                    .addComponent(f_price, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(insertFormFoodLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel16)
                    .addComponent(category, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(38, 38, 38)
                .addGroup(insertFormFoodLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(submitF)
                    .addComponent(backF))
                .addContainerGap(248, Short.MAX_VALUE))
        );

        getContentPane().add(insertFormFood, "card3");

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel6.setText("Name :");

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel7.setText("Address: ");

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel8.setText("Contact NO. :");

        jLabel12.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel12.setText("JOB :");

        submitE.setText("SUBMIT");
        submitE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitEActionPerformed(evt);
            }
        });

        backE.setText("BACK");
        backE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backEActionPerformed(evt);
            }
        });

        assignJob.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "chef", "waiter", "kitchen assistant", "manager", "accountant" }));

        dept_name_admin.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "kitchen", "management", "wait staff" }));

        getDepartment.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        javax.swing.GroupLayout insertFormEmpLayout = new javax.swing.GroupLayout(insertFormEmp);
        insertFormEmp.setLayout(insertFormEmpLayout);
        insertFormEmpLayout.setHorizontalGroup(
            insertFormEmpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(insertFormEmpLayout.createSequentialGroup()
                .addGap(235, 235, 235)
                .addGroup(insertFormEmpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, insertFormEmpLayout.createSequentialGroup()
                        .addComponent(submitE)
                        .addGap(95, 95, 95)
                        .addComponent(backE))
                    .addGroup(insertFormEmpLayout.createSequentialGroup()
                        .addGroup(insertFormEmpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addComponent(jLabel7)
                            .addComponent(jLabel8)
                            .addGroup(insertFormEmpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(getDepartment)
                                .addComponent(jLabel12)))
                        .addGap(40, 40, 40)
                        .addGroup(insertFormEmpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(dept_name_admin, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(e_name)
                            .addComponent(address)
                            .addComponent(contactNO)
                            .addComponent(assignJob, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(305, Short.MAX_VALUE))
        );
        insertFormEmpLayout.setVerticalGroup(
            insertFormEmpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(insertFormEmpLayout.createSequentialGroup()
                .addGap(84, 84, 84)
                .addGroup(insertFormEmpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(e_name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addGap(18, 18, 18)
                .addGroup(insertFormEmpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(address, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addGap(18, 18, 18)
                .addGroup(insertFormEmpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(contactNO, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addGap(89, 89, 89)
                .addGroup(insertFormEmpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dept_name_admin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(getDepartment))
                .addGap(31, 31, 31)
                .addGroup(insertFormEmpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(assignJob, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 86, Short.MAX_VALUE)
                .addGroup(insertFormEmpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(submitE)
                    .addComponent(backE))
                .addGap(72, 72, 72))
        );

        getContentPane().add(insertFormEmp, "card3");

        jLabel9.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel9.setText("Employee_id :");

        jLabel17.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel17.setText("Name :");

        jLabel21.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel21.setText("Department : ");

        jLabel22.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel22.setText("JOB :");

        deleteE.setText("DELETE");
        deleteE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteEActionPerformed(evt);
            }
        });

        back_delE.setText("BACK");
        back_delE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                back_delEActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout deleteFormEmpLayout = new javax.swing.GroupLayout(deleteFormEmp);
        deleteFormEmp.setLayout(deleteFormEmpLayout);
        deleteFormEmpLayout.setHorizontalGroup(
            deleteFormEmpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(deleteFormEmpLayout.createSequentialGroup()
                .addGroup(deleteFormEmpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(deleteFormEmpLayout.createSequentialGroup()
                        .addGap(218, 218, 218)
                        .addGroup(deleteFormEmpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel9)
                            .addComponent(jLabel17)
                            .addComponent(jLabel21)
                            .addComponent(jLabel22))
                        .addGap(42, 42, 42)
                        .addGroup(deleteFormEmpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(deleteFormEmpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(e_name_del, javax.swing.GroupLayout.DEFAULT_SIZE, 143, Short.MAX_VALUE)
                                .addComponent(e_id_del))
                            .addComponent(departmentName_del, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jobName_del, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(deleteFormEmpLayout.createSequentialGroup()
                        .addGap(263, 263, 263)
                        .addComponent(deleteE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(back_delE)))
                .addContainerGap(318, Short.MAX_VALUE))
        );
        deleteFormEmpLayout.setVerticalGroup(
            deleteFormEmpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(deleteFormEmpLayout.createSequentialGroup()
                .addGap(68, 68, 68)
                .addGroup(deleteFormEmpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(e_id_del, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9))
                .addGap(28, 28, 28)
                .addGroup(deleteFormEmpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(e_name_del, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel17))
                .addGap(47, 47, 47)
                .addGroup(deleteFormEmpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel21)
                    .addComponent(departmentName_del, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(40, 40, 40)
                .addGroup(deleteFormEmpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel22)
                    .addComponent(jobName_del, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 101, Short.MAX_VALUE)
                .addGroup(deleteFormEmpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(deleteE)
                    .addComponent(back_delE))
                .addGap(134, 134, 134))
        );

        getContentPane().add(deleteFormEmp, "card3");

        jLabel18.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel18.setText("Food_id :");

        jLabel19.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel19.setText("Name :");

        deleteF.setText("DELETE");
        deleteF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteFActionPerformed(evt);
            }
        });

        back_delF.setText("BACK");
        back_delF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                back_delFActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout deleteFormFoodLayout = new javax.swing.GroupLayout(deleteFormFood);
        deleteFormFood.setLayout(deleteFormFoodLayout);
        deleteFormFoodLayout.setHorizontalGroup(
            deleteFormFoodLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(deleteFormFoodLayout.createSequentialGroup()
                .addGap(263, 263, 263)
                .addGroup(deleteFormFoodLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(deleteFormFoodLayout.createSequentialGroup()
                        .addGroup(deleteFormFoodLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel18)
                            .addComponent(jLabel19))
                        .addGap(71, 71, 71)
                        .addGroup(deleteFormFoodLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(f_name_del)
                            .addComponent(f_id_del, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(deleteFormFoodLayout.createSequentialGroup()
                        .addComponent(deleteF)
                        .addGap(99, 99, 99)
                        .addComponent(back_delF)))
                .addContainerGap(273, Short.MAX_VALUE))
        );
        deleteFormFoodLayout.setVerticalGroup(
            deleteFormFoodLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(deleteFormFoodLayout.createSequentialGroup()
                .addContainerGap(202, Short.MAX_VALUE)
                .addGroup(deleteFormFoodLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(f_id_del, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel18))
                .addGap(28, 28, 28)
                .addGroup(deleteFormFoodLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(f_name_del, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel19))
                .addGap(94, 94, 94)
                .addGroup(deleteFormFoodLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(deleteF)
                    .addComponent(back_delF))
                .addGap(134, 134, 134))
        );

        getContentPane().add(deleteFormFood, "card3");

        addB.setText("ADD");
        addB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBActionPerformed(evt);
            }
        });

        jLabel11.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel11.setText("Enter Amount:");

        jLabel35.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel35.setText("Item:");

        submitB.setText("SUBMIT");
        submitB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitBActionPerformed(evt);
            }
        });

        backB.setText("BACK");
        backB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout insertFormBillsLayout = new javax.swing.GroupLayout(insertFormBills);
        insertFormBills.setLayout(insertFormBillsLayout);
        insertFormBillsLayout.setHorizontalGroup(
            insertFormBillsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(insertFormBillsLayout.createSequentialGroup()
                .addGap(127, 127, 127)
                .addGroup(insertFormBillsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(insertFormBillsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(item, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel35, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(submitB, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(insertFormBillsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(insertFormBillsLayout.createSequentialGroup()
                        .addGap(188, 188, 188)
                        .addGroup(insertFormBillsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel11)
                            .addComponent(amount, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(insertFormBillsLayout.createSequentialGroup()
                        .addGap(144, 144, 144)
                        .addComponent(backB, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(160, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, insertFormBillsLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(addB, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(158, 158, 158))
        );
        insertFormBillsLayout.setVerticalGroup(
            insertFormBillsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(insertFormBillsLayout.createSequentialGroup()
                .addGap(68, 68, 68)
                .addGroup(insertFormBillsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel11)
                    .addGroup(insertFormBillsLayout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(jLabel35, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(insertFormBillsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(item, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(amount, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(56, 56, 56)
                .addComponent(addB, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 144, Short.MAX_VALUE)
                .addGroup(insertFormBillsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(backB, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(submitB, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(89, 89, 89))
        );

        getContentPane().add(insertFormBills, "card12");

        jLabel36.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel36.setText("Bill ID: ");

        backDelB.setText("DELETE");
        backDelB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backDelBActionPerformed(evt);
            }
        });

        dayB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "NULL", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31" }));

        monB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "NULL", "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" }));

        yearB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "NULL", "2015", "2014", "2013", "2012", "2011", "2010", "2009", "2008", "2007", "2006", "2005", "2004", "2003", "2002", "2001", "2000" }));

        jLabel37.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel37.setText("DATE:");

        backDelBill.setText("BACK");
        backDelBill.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backDelBillActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout deleteFormBillsLayout = new javax.swing.GroupLayout(deleteFormBills);
        deleteFormBills.setLayout(deleteFormBillsLayout);
        deleteFormBillsLayout.setHorizontalGroup(
            deleteFormBillsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(deleteFormBillsLayout.createSequentialGroup()
                .addGroup(deleteFormBillsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(deleteFormBillsLayout.createSequentialGroup()
                        .addGap(225, 225, 225)
                        .addGroup(deleteFormBillsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel36)
                            .addComponent(jLabel37))
                        .addGap(82, 82, 82)
                        .addGroup(deleteFormBillsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(deleteFormBillsLayout.createSequentialGroup()
                                .addComponent(dayB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(monB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(billID, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(40, 40, 40)
                        .addComponent(yearB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(deleteFormBillsLayout.createSequentialGroup()
                        .addGap(260, 260, 260)
                        .addComponent(backDelB, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(105, 105, 105)
                        .addComponent(backDelBill, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(215, Short.MAX_VALUE))
        );
        deleteFormBillsLayout.setVerticalGroup(
            deleteFormBillsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(deleteFormBillsLayout.createSequentialGroup()
                .addGap(84, 84, 84)
                .addGroup(deleteFormBillsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(billID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel36))
                .addGap(63, 63, 63)
                .addGroup(deleteFormBillsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dayB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(monB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(yearB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel37))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 239, Short.MAX_VALUE)
                .addGroup(deleteFormBillsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(backDelB, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(backDelBill, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(62, 62, 62))
        );

        getContentPane().add(deleteFormBills, "card13");

        jLabel38.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel38.setText("SELECT: ");

        emp_id.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        emp_id.setText("id");

        emp_name.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        emp_name.setText("name");

        emp_address.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        emp_address.setText("address");

        emp_contactno.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        emp_contactno.setText("contact no");

        emp_hire_date.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        emp_hire_date.setText("hire date");

        emp_dept_name.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        emp_dept_name.setText("department name");

        emp_job_name.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        emp_job_name.setText("job name");

        emp_manager_name.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        emp_manager_name.setText("manager name");

        emp_sal.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        emp_sal.setText("salary");

        condQemp.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "employee id", "employee name", "salary", "hire date", "department name", "job name" }));
        condQemp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                condQempActionPerformed(evt);
            }
        });

        jLabel39.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel39.setText("Condition:");

        condRelQemp.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "=", ">=", ">", "<=", "<" }));

        addCondQemp.setText("ADD Condition");
        addCondQemp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addCondQempActionPerformed(evt);
            }
        });

        showQemp.setText("SHOW");
        showQemp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showQempActionPerformed(evt);
            }
        });

        backQemp.setText("BACK");
        backQemp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backQempActionPerformed(evt);
            }
        });

        jLabel40.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel40.setText("Value:");

        javax.swing.GroupLayout queryFormEmpLayout = new javax.swing.GroupLayout(queryFormEmp);
        queryFormEmp.setLayout(queryFormEmpLayout);
        queryFormEmpLayout.setHorizontalGroup(
            queryFormEmpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(queryFormEmpLayout.createSequentialGroup()
                .addGap(74, 74, 74)
                .addGroup(queryFormEmpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(queryFormEmpLayout.createSequentialGroup()
                        .addGroup(queryFormEmpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(queryFormEmpLayout.createSequentialGroup()
                                .addGroup(queryFormEmpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(emp_name)
                                    .addComponent(emp_sal)
                                    .addComponent(jLabel38)
                                    .addComponent(emp_id))
                                .addGap(209, 209, 209)
                                .addGroup(queryFormEmpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel39)
                                    .addComponent(condQemp, 0, 122, Short.MAX_VALUE)
                                    .addComponent(addCondQemp, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addComponent(emp_job_name)
                            .addComponent(emp_manager_name))
                        .addGap(114, 114, 114)
                        .addGroup(queryFormEmpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(QempInput)
                            .addComponent(condRelQemp, 0, 150, Short.MAX_VALUE)
                            .addComponent(showQemp, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(backQemp, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel40))
                        .addGap(78, 78, 78))
                    .addGroup(queryFormEmpLayout.createSequentialGroup()
                        .addGroup(queryFormEmpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(emp_dept_name)
                            .addComponent(emp_hire_date)
                            .addComponent(emp_contactno)
                            .addComponent(emp_address))
                        .addGap(582, 582, 582))))
        );
        queryFormEmpLayout.setVerticalGroup(
            queryFormEmpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(queryFormEmpLayout.createSequentialGroup()
                .addGroup(queryFormEmpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(queryFormEmpLayout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addGroup(queryFormEmpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, queryFormEmpLayout.createSequentialGroup()
                                .addComponent(jLabel38)
                                .addGap(49, 49, 49))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, queryFormEmpLayout.createSequentialGroup()
                                .addComponent(addCondQemp, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(30, 30, 30)))
                        .addGroup(queryFormEmpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel39)
                            .addComponent(jLabel40))
                        .addGap(23, 23, 23)
                        .addGroup(queryFormEmpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(QempInput, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(condQemp, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(31, 31, 31)
                        .addGroup(queryFormEmpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(queryFormEmpLayout.createSequentialGroup()
                                .addGap(2, 2, 2)
                                .addComponent(emp_address))
                            .addComponent(condRelQemp, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(6, 6, 6)
                        .addComponent(emp_contactno)
                        .addGap(18, 18, 18)
                        .addComponent(emp_hire_date)
                        .addGap(18, 18, 18)
                        .addComponent(emp_dept_name)
                        .addGap(2, 2, 2)
                        .addGroup(queryFormEmpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(queryFormEmpLayout.createSequentialGroup()
                                .addGap(16, 16, 16)
                                .addComponent(emp_job_name))
                            .addComponent(showQemp, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(10, 10, 10)
                        .addGroup(queryFormEmpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(queryFormEmpLayout.createSequentialGroup()
                                .addGap(8, 8, 8)
                                .addComponent(emp_manager_name))
                            .addComponent(backQemp, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(queryFormEmpLayout.createSequentialGroup()
                        .addGap(83, 83, 83)
                        .addComponent(emp_id)
                        .addGap(18, 18, 18)
                        .addComponent(emp_name)
                        .addGap(18, 18, 18)
                        .addComponent(emp_sal)))
                .addContainerGap(69, Short.MAX_VALUE))
        );

        getContentPane().add(queryFormEmp, "card14");

        jLabel42.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel42.setText("SELECT: ");

        addCondFood.setText("ADD Condition");
        addCondFood.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addCondFoodActionPerformed(evt);
            }
        });

        condQfood.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "food id", "food name", "food category", "unit price" }));

        jLabel43.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel43.setText("Condition:");

        jLabel44.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel44.setText("Value:");

        condRelQfood.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "=", ">=", ">", "<=", "<" }));

        showQfood.setText("SHOW");
        showQfood.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showQfoodActionPerformed(evt);
            }
        });

        backQfood.setText("BACK");
        backQfood.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backQfoodActionPerformed(evt);
            }
        });

        F_id.setText("Food id");

        F_name.setText("Food name");

        F_price.setText("Unit Price");

        F_category.setText("Category");

        javax.swing.GroupLayout queryFormFoodLayout = new javax.swing.GroupLayout(queryFormFood);
        queryFormFood.setLayout(queryFormFoodLayout);
        queryFormFoodLayout.setHorizontalGroup(
            queryFormFoodLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(queryFormFoodLayout.createSequentialGroup()
                .addGap(47, 47, 47)
                .addGroup(queryFormFoodLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(F_category)
                    .addComponent(F_price)
                    .addComponent(F_name)
                    .addComponent(F_id))
                .addContainerGap(682, Short.MAX_VALUE))
            .addGroup(queryFormFoodLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(queryFormFoodLayout.createSequentialGroup()
                    .addGap(47, 47, 47)
                    .addComponent(jLabel42)
                    .addGap(209, 209, 209)
                    .addGroup(queryFormFoodLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jLabel43)
                        .addComponent(condQfood, 0, 122, Short.MAX_VALUE)
                        .addComponent(addCondFood, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGap(114, 114, 114)
                    .addGroup(queryFormFoodLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(QfoodInput)
                        .addComponent(condRelQfood, 0, 212, Short.MAX_VALUE)
                        .addComponent(showQfood, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(backQfood, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel44))
                    .addGap(47, 47, 47)))
        );
        queryFormFoodLayout.setVerticalGroup(
            queryFormFoodLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(queryFormFoodLayout.createSequentialGroup()
                .addGap(111, 111, 111)
                .addComponent(F_id)
                .addGap(34, 34, 34)
                .addComponent(F_name)
                .addGap(33, 33, 33)
                .addComponent(F_category)
                .addGap(29, 29, 29)
                .addComponent(F_price)
                .addContainerGap(222, Short.MAX_VALUE))
            .addGroup(queryFormFoodLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(queryFormFoodLayout.createSequentialGroup()
                    .addGap(54, 54, 54)
                    .addGroup(queryFormFoodLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, queryFormFoodLayout.createSequentialGroup()
                            .addComponent(jLabel42)
                            .addGap(49, 49, 49))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, queryFormFoodLayout.createSequentialGroup()
                            .addComponent(addCondFood, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(30, 30, 30)))
                    .addGroup(queryFormFoodLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel43)
                        .addComponent(jLabel44))
                    .addGap(23, 23, 23)
                    .addGroup(queryFormFoodLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(QfoodInput, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(condQfood, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(31, 31, 31)
                    .addComponent(condRelQfood, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(119, 119, 119)
                    .addComponent(showQfood, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(10, 10, 10)
                    .addComponent(backQfood, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(53, Short.MAX_VALUE)))
        );

        getContentPane().add(queryFormFood, "card14");

        jLabel45.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel45.setText("SELECT: ");

        addCondBill.setText("ADD Condition");
        addCondBill.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addCondBillActionPerformed(evt);
            }
        });

        jLabel46.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel46.setText("Condition:");

        condQbill.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "bill id", "date" }));
        condQbill.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                condQbillActionPerformed(evt);
            }
        });

        jLabel47.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel47.setText("Value:");

        condRelQbill.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "=", ">=", ">", "<=", "<" }));

        showQbill.setText("SHOW");
        showQbill.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showQbillActionPerformed(evt);
            }
        });

        backQbill.setText("BACK");
        backQbill.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backQbillActionPerformed(evt);
            }
        });

        brief.setText("Brief");

        details.setText("Details");

        javax.swing.GroupLayout queryFormBillLayout = new javax.swing.GroupLayout(queryFormBill);
        queryFormBill.setLayout(queryFormBillLayout);
        queryFormBillLayout.setHorizontalGroup(
            queryFormBillLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(queryFormBillLayout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addGroup(queryFormBillLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(details)
                    .addComponent(brief))
                .addContainerGap(707, Short.MAX_VALUE))
            .addGroup(queryFormBillLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(queryFormBillLayout.createSequentialGroup()
                    .addGap(47, 47, 47)
                    .addComponent(jLabel45)
                    .addGap(209, 209, 209)
                    .addGroup(queryFormBillLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jLabel46)
                        .addComponent(condQbill, 0, 122, Short.MAX_VALUE)
                        .addComponent(addCondBill, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGap(114, 114, 114)
                    .addGroup(queryFormBillLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(QbillInput)
                        .addComponent(condRelQbill, 0, 212, Short.MAX_VALUE)
                        .addComponent(showQbill, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(backQbill, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel47))
                    .addGap(47, 47, 47)))
        );
        queryFormBillLayout.setVerticalGroup(
            queryFormBillLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(queryFormBillLayout.createSequentialGroup()
                .addGap(113, 113, 113)
                .addComponent(brief)
                .addGap(18, 18, 18)
                .addComponent(details)
                .addContainerGap(344, Short.MAX_VALUE))
            .addGroup(queryFormBillLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(queryFormBillLayout.createSequentialGroup()
                    .addGap(58, 58, 58)
                    .addGroup(queryFormBillLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, queryFormBillLayout.createSequentialGroup()
                            .addComponent(jLabel45)
                            .addGap(49, 49, 49))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, queryFormBillLayout.createSequentialGroup()
                            .addComponent(addCondBill, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(30, 30, 30)))
                    .addGroup(queryFormBillLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel46)
                        .addComponent(jLabel47))
                    .addGap(23, 23, 23)
                    .addGroup(queryFormBillLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(QbillInput, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(condQbill, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(31, 31, 31)
                    .addComponent(condRelQbill, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(119, 119, 119)
                    .addComponent(showQbill, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(10, 10, 10)
                    .addComponent(backQbill, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(49, Short.MAX_VALUE)))
        );

        getContentPane().add(queryFormBill, "card15");

        updateInfoEmp.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Address", "Contact No." }));

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel5.setText("Employee Name");

        submitUEmp.setText("SUBMIT");
        submitUEmp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitUEmpActionPerformed(evt);
            }
        });

        backUEmp.setText("BACK");
        backUEmp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backUEmpActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout updateFormEmpLayout = new javax.swing.GroupLayout(updateFormEmp);
        updateFormEmp.setLayout(updateFormEmpLayout);
        updateFormEmpLayout.setHorizontalGroup(
            updateFormEmpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(updateFormEmpLayout.createSequentialGroup()
                .addGroup(updateFormEmpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(updateFormEmpLayout.createSequentialGroup()
                        .addGap(196, 196, 196)
                        .addComponent(submitUEmp, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(100, 100, 100)
                        .addComponent(backUEmp, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(updateFormEmpLayout.createSequentialGroup()
                        .addGap(166, 166, 166)
                        .addGroup(updateFormEmpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel5)
                            .addComponent(updateInfoEmp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(updateFormEmpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(updateInfoEmpText, javax.swing.GroupLayout.DEFAULT_SIZE, 232, Short.MAX_VALUE)
                            .addComponent(updateCondEmpName))))
                .addContainerGap(293, Short.MAX_VALUE))
        );
        updateFormEmpLayout.setVerticalGroup(
            updateFormEmpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(updateFormEmpLayout.createSequentialGroup()
                .addGap(114, 114, 114)
                .addGroup(updateFormEmpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(updateCondEmpName, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(44, 44, 44)
                .addGroup(updateFormEmpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(updateInfoEmp, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(updateInfoEmpText, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 228, Short.MAX_VALUE)
                .addGroup(updateFormEmpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(submitUEmp, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(backUEmp, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(33, 33, 33))
        );

        getContentPane().add(updateFormEmp, "card16");

        jLabel13.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel13.setText("Food Name:");

        updateInfoFood.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Set Price", "Increase Price by" }));

        submitUFood.setText("SUBMIT");
        submitUFood.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitUFoodActionPerformed(evt);
            }
        });

        backUFood.setText("BACK");
        backUFood.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backUFoodActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout updateFormFoodLayout = new javax.swing.GroupLayout(updateFormFood);
        updateFormFood.setLayout(updateFormFoodLayout);
        updateFormFoodLayout.setHorizontalGroup(
            updateFormFoodLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(updateFormFoodLayout.createSequentialGroup()
                .addGroup(updateFormFoodLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(updateFormFoodLayout.createSequentialGroup()
                        .addGap(196, 196, 196)
                        .addComponent(submitUFood, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(100, 100, 100)
                        .addComponent(backUFood, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(updateFormFoodLayout.createSequentialGroup()
                        .addGap(166, 166, 166)
                        .addGroup(updateFormFoodLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel13)
                            .addComponent(updateInfoFood, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(updateFormFoodLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(updateInfoFoodText, javax.swing.GroupLayout.DEFAULT_SIZE, 232, Short.MAX_VALUE)
                            .addComponent(updateCondFoodName))))
                .addContainerGap(284, Short.MAX_VALUE))
        );
        updateFormFoodLayout.setVerticalGroup(
            updateFormFoodLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(updateFormFoodLayout.createSequentialGroup()
                .addGap(114, 114, 114)
                .addGroup(updateFormFoodLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(updateCondFoodName, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(44, 44, 44)
                .addGroup(updateFormFoodLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(updateInfoFood, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(updateInfoFoodText, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 228, Short.MAX_VALUE)
                .addGroup(updateFormFoodLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(submitUFood, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(backUFood, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(33, 33, 33))
        );

        getContentPane().add(updateFormFood, "card17");

        jLabel41.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel41.setText("Job Name:");

        updateInfoJob.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Set Salary", "Increase salary by" }));

        submitUJob.setText("SUBMIT");
        submitUJob.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitUJobActionPerformed(evt);
            }
        });

        backUJob.setText("BACK");
        backUJob.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backUJobActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout updateFormJobLayout = new javax.swing.GroupLayout(updateFormJob);
        updateFormJob.setLayout(updateFormJobLayout);
        updateFormJobLayout.setHorizontalGroup(
            updateFormJobLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(updateFormJobLayout.createSequentialGroup()
                .addGroup(updateFormJobLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(updateFormJobLayout.createSequentialGroup()
                        .addGap(196, 196, 196)
                        .addComponent(submitUJob, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(100, 100, 100)
                        .addComponent(backUJob, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(updateFormJobLayout.createSequentialGroup()
                        .addGap(166, 166, 166)
                        .addGroup(updateFormJobLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel41)
                            .addComponent(updateInfoJob, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(updateFormJobLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(updateInfoJobText, javax.swing.GroupLayout.DEFAULT_SIZE, 232, Short.MAX_VALUE)
                            .addComponent(updateCondJobName))))
                .addContainerGap(278, Short.MAX_VALUE))
        );
        updateFormJobLayout.setVerticalGroup(
            updateFormJobLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(updateFormJobLayout.createSequentialGroup()
                .addGap(114, 114, 114)
                .addGroup(updateFormJobLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel41)
                    .addComponent(updateCondJobName, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(44, 44, 44)
                .addGroup(updateFormJobLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(updateInfoJob, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(updateInfoJobText, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 228, Short.MAX_VALUE)
                .addGroup(updateFormJobLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(submitUJob, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(backUJob, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(33, 33, 33))
        );

        getContentPane().add(updateFormJob, "card18");

        jLabel49.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel49.setText("Current Password:");

        jLabel50.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel50.setText("New Password:");

        submitPass.setText("SUBMIT");
        submitPass.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitPassActionPerformed(evt);
            }
        });

        backPass.setText("BACK");
        backPass.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backPassActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout changePasswordFormLayout = new javax.swing.GroupLayout(changePasswordForm);
        changePasswordForm.setLayout(changePasswordFormLayout);
        changePasswordFormLayout.setHorizontalGroup(
            changePasswordFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(changePasswordFormLayout.createSequentialGroup()
                .addGroup(changePasswordFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(changePasswordFormLayout.createSequentialGroup()
                        .addGap(148, 148, 148)
                        .addGroup(changePasswordFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(changePasswordFormLayout.createSequentialGroup()
                                .addComponent(jLabel50, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(newPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(changePasswordFormLayout.createSequentialGroup()
                                .addComponent(jLabel49, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(curPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(changePasswordFormLayout.createSequentialGroup()
                        .addGap(208, 208, 208)
                        .addComponent(submitPass, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(167, 167, 167)
                        .addComponent(backPass, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(258, Short.MAX_VALUE))
        );
        changePasswordFormLayout.setVerticalGroup(
            changePasswordFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(changePasswordFormLayout.createSequentialGroup()
                .addGap(129, 129, 129)
                .addGroup(changePasswordFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(curPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel49, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addGroup(changePasswordFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel50, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(newPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 169, Short.MAX_VALUE)
                .addGroup(changePasswordFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(submitPass, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(backPass, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(111, 111, 111))
        );

        getContentPane().add(changePasswordForm, "card19");

        jLabel51.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel51.setText("Name :");

        jLabel52.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel52.setText("Unit Price :");

        jLabel53.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel53.setText("Quantity:");

        submitI.setText("SUBMIT");
        submitI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitIActionPerformed(evt);
            }
        });

        backI.setText("Back");
        backI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backIActionPerformed(evt);
            }
        });

        itemDeptChoice.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "kitchen", "wait staff", "management" }));

        jLabel54.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel54.setText("Department:");

        javax.swing.GroupLayout insertFormItemLayout = new javax.swing.GroupLayout(insertFormItem);
        insertFormItem.setLayout(insertFormItemLayout);
        insertFormItemLayout.setHorizontalGroup(
            insertFormItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(insertFormItemLayout.createSequentialGroup()
                .addGroup(insertFormItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(insertFormItemLayout.createSequentialGroup()
                        .addGap(200, 200, 200)
                        .addGroup(insertFormItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(insertFormItemLayout.createSequentialGroup()
                                .addComponent(jLabel54)
                                .addGap(33, 33, 33)
                                .addComponent(itemDeptChoice, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(insertFormItemLayout.createSequentialGroup()
                                .addComponent(jLabel53)
                                .addGap(40, 40, 40)
                                .addComponent(item_quantity_text, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(insertFormItemLayout.createSequentialGroup()
                                .addGroup(insertFormItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel51)
                                    .addComponent(jLabel52))
                                .addGap(32, 32, 32)
                                .addGroup(insertFormItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(item_price_text, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(item_name_text, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(insertFormItemLayout.createSequentialGroup()
                        .addGap(237, 237, 237)
                        .addComponent(submitI)
                        .addGap(31, 31, 31)
                        .addComponent(backI)))
                .addContainerGap(367, Short.MAX_VALUE))
        );
        insertFormItemLayout.setVerticalGroup(
            insertFormItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(insertFormItemLayout.createSequentialGroup()
                .addGap(126, 126, 126)
                .addGroup(insertFormItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel51)
                    .addComponent(item_name_text, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(insertFormItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel52)
                    .addComponent(item_price_text, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addGroup(insertFormItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel53)
                    .addComponent(item_quantity_text, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(insertFormItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(itemDeptChoice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel54))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 158, Short.MAX_VALUE)
                .addGroup(insertFormItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(submitI)
                    .addComponent(backI))
                .addGap(72, 72, 72))
        );

        getContentPane().add(insertFormItem, "card20");

        jLabel55.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel55.setText("Name :");

        deleteI.setText("DELETE");
        deleteI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteIActionPerformed(evt);
            }
        });

        back_delI.setText("BACK");
        back_delI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                back_delIActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout deleteFormItemLayout = new javax.swing.GroupLayout(deleteFormItem);
        deleteFormItem.setLayout(deleteFormItemLayout);
        deleteFormItemLayout.setHorizontalGroup(
            deleteFormItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(deleteFormItemLayout.createSequentialGroup()
                .addGap(208, 208, 208)
                .addComponent(jLabel55)
                .addGap(46, 46, 46)
                .addComponent(i_name_del, javax.swing.GroupLayout.DEFAULT_SIZE, 279, Short.MAX_VALUE)
                .addGap(231, 231, 231))
            .addGroup(deleteFormItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(deleteFormItemLayout.createSequentialGroup()
                    .addGap(207, 207, 207)
                    .addComponent(deleteI)
                    .addGap(99, 99, 99)
                    .addComponent(back_delI)
                    .addContainerGap(374, Short.MAX_VALUE)))
        );
        deleteFormItemLayout.setVerticalGroup(
            deleteFormItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(deleteFormItemLayout.createSequentialGroup()
                .addGap(168, 168, 168)
                .addGroup(deleteFormItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(i_name_del, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel55))
                .addContainerGap(333, Short.MAX_VALUE))
            .addGroup(deleteFormItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(deleteFormItemLayout.createSequentialGroup()
                    .addGap(279, 279, 279)
                    .addGroup(deleteFormItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(deleteI)
                        .addComponent(back_delI))
                    .addContainerGap(219, Short.MAX_VALUE)))
        );

        getContentPane().add(deleteFormItem, "card21");

        jLabel56.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel56.setText("SELECT: ");

        addCondItem.setText("ADD Condition");
        addCondItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addCondItemActionPerformed(evt);
            }
        });

        condQItem.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "item id", "item name", "department name" }));

        jLabel57.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel57.setText("Condition:");

        jLabel58.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel58.setText("Value:");

        showQitem.setText("SHOW");
        showQitem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showQitemActionPerformed(evt);
            }
        });

        backQitem.setText("BACK");
        backQitem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backQitemActionPerformed(evt);
            }
        });

        item_id.setText("Item ID");

        item_name.setText("item name");

        item_price.setText("Unit Price");

        item_quantity.setText("quantity");

        item_dept.setText("department name");

        javax.swing.GroupLayout queryFormItemLayout = new javax.swing.GroupLayout(queryFormItem);
        queryFormItem.setLayout(queryFormItemLayout);
        queryFormItemLayout.setHorizontalGroup(
            queryFormItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(queryFormItemLayout.createSequentialGroup()
                .addGap(47, 47, 47)
                .addGroup(queryFormItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(item_dept)
                    .addComponent(item_quantity)
                    .addComponent(item_price)
                    .addComponent(item_name)
                    .addComponent(item_id))
                .addContainerGap(650, Short.MAX_VALUE))
            .addGroup(queryFormItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(queryFormItemLayout.createSequentialGroup()
                    .addGap(47, 47, 47)
                    .addComponent(jLabel56)
                    .addGap(209, 209, 209)
                    .addGroup(queryFormItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jLabel57)
                        .addComponent(condQItem, 0, 122, Short.MAX_VALUE)
                        .addComponent(addCondItem, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGap(114, 114, 114)
                    .addGroup(queryFormItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(QitemInput)
                        .addComponent(showQitem, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(backQitem, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel58))
                    .addGap(47, 47, 47)))
        );
        queryFormItemLayout.setVerticalGroup(
            queryFormItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(queryFormItemLayout.createSequentialGroup()
                .addGap(111, 111, 111)
                .addComponent(item_id)
                .addGap(34, 34, 34)
                .addComponent(item_name)
                .addGap(33, 33, 33)
                .addComponent(item_quantity)
                .addGap(29, 29, 29)
                .addComponent(item_price)
                .addGap(18, 18, 18)
                .addComponent(item_dept)
                .addContainerGap(181, Short.MAX_VALUE))
            .addGroup(queryFormItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(queryFormItemLayout.createSequentialGroup()
                    .addGap(54, 54, 54)
                    .addGroup(queryFormItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, queryFormItemLayout.createSequentialGroup()
                            .addComponent(jLabel56)
                            .addGap(49, 49, 49))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, queryFormItemLayout.createSequentialGroup()
                            .addComponent(addCondItem, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(30, 30, 30)))
                    .addGroup(queryFormItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel57)
                        .addComponent(jLabel58))
                    .addGap(23, 23, 23)
                    .addGroup(queryFormItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(QitemInput, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(condQItem, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(189, 189, 189)
                    .addComponent(showQitem, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(10, 10, 10)
                    .addComponent(backQitem, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(53, Short.MAX_VALUE)))
        );

        getContentPane().add(queryFormItem, "card14");

        jLabel59.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel59.setText("Item Name:");

        submitUItem.setText("SUBMIT");
        submitUItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitUItemActionPerformed(evt);
            }
        });

        backUItem.setText("BACK");
        backUItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backUItemActionPerformed(evt);
            }
        });

        updateQuantityItem.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Set Quantity", "Increase Quantity By" }));

        javax.swing.GroupLayout updateFormItemLayout = new javax.swing.GroupLayout(updateFormItem);
        updateFormItem.setLayout(updateFormItemLayout);
        updateFormItemLayout.setHorizontalGroup(
            updateFormItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(updateFormItemLayout.createSequentialGroup()
                .addGroup(updateFormItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(updateFormItemLayout.createSequentialGroup()
                        .addGap(176, 176, 176)
                        .addGroup(updateFormItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel59, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(updateQuantityItem, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(updateFormItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(updateCondItemName, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(updateQuantityText, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(updateFormItemLayout.createSequentialGroup()
                        .addGap(196, 196, 196)
                        .addComponent(submitUItem, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(100, 100, 100)
                        .addComponent(backUItem, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(255, Short.MAX_VALUE))
        );
        updateFormItemLayout.setVerticalGroup(
            updateFormItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(updateFormItemLayout.createSequentialGroup()
                .addGap(114, 114, 114)
                .addGroup(updateFormItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel59)
                    .addComponent(updateCondItemName, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(59, 59, 59)
                .addGroup(updateFormItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(updateQuantityItem, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(updateQuantityText, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 213, Short.MAX_VALUE)
                .addGroup(updateFormItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(submitUItem, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(backUItem, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(33, 33, 33))
        );

        getContentPane().add(updateFormItem, "card17");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void submitFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitFActionPerformed
        // TODO add your handling code here:

        int curFoodID = 0;

        String query = "Select max(\"food_id\") from \"rFoodItem\"";

        try {
            Statement st = connectOracle.conn.createStatement();
            try (ResultSet rs = st.executeQuery(query)) {
                if (rs.next()) {
                    curFoodID = rs.getInt(1);
                }
                rs.close();
            }

        } catch (SQLException ex) {
            Logger.getLogger(ALL.class.getName()).log(Level.SEVERE, null, ex);
        }

        curFoodID++;

        String food_id = Integer.toString(curFoodID);
        String food_name = f_name.getText();
        String food_price = f_price.getText();
        String food_category = category.getText();
        String fDept_id = "1000";

//String getDate = ""; 
        if (food_id.length() == 0 || food_name.length() == 0 || food_price.length() == 0 || food_category.length() == 0) {
            JOptionPane.showMessageDialog(this, "One or more Field(s) Empty.");
        } else {
            String INS = "insert into \"rFoodItem\" values (" + food_id + ',' + "'" + food_name + "'," + "'" + food_price + "',"
                    + "'" + food_category + "'," + fDept_id + ")";
            System.out.println(INS);
            boolean inserted = true;
            try {
                Statement st = connectOracle.conn.createStatement();
                st.executeUpdate(INS);
            } catch (SQLException ex) {
                inserted = false;
                Logger.getLogger(ALL.class.getName()).log(Level.SEVERE, null, ex);
            }
            if (inserted) {
                System.out.println("Record inserted in rFood table");
                f_name.setText("");
                category.setText("");
                f_price.setText("");
                JOptionPane.showMessageDialog(this, "Data inserted successfully.");
            } else {
                System.out.println("Error in insertion");
                inserted = true;
            }
        }
    }//GEN-LAST:event_submitFActionPerformed

    private void backFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backFActionPerformed
        // TODO add your handling code here:
        insertFormFood.setEnabled(false);
        insertFormFood.setVisible(false);
        switch (curDepartment) {
            case -1:
                options.setEnabled(true);
                options.setVisible(true);
                break;
            case 1000:
                optionsKitchen.setEnabled(true);
                optionsKitchen.setVisible(true);
                break;
            case 2000:
                optionsWaitStuff.setEnabled(true);
                optionsWaitStuff.setVisible(true);
                break;
            case 3000:
                optionsManagement.setEnabled(true);
                optionsManagement.setVisible(true);
                break;
            default:
                break;
        }


    }//GEN-LAST:event_backFActionPerformed

    private void back_delEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_back_delEActionPerformed
        // TODO add your handling code here:
        deleteFormEmp.setEnabled(false);
        deleteFormEmp.setVisible(false);

        switch (curDepartment) {
            case -1:
                options.setEnabled(true);
                options.setVisible(true);
                break;
            case 1000:
                optionsKitchen.setEnabled(true);
                optionsKitchen.setVisible(true);
                break;
            case 2000:
                optionsWaitStuff.setEnabled(true);
                optionsWaitStuff.setVisible(true);
                break;
            case 3000:
                optionsManagement.setEnabled(true);
                optionsManagement.setVisible(true);
                break;
            default:
                break;
        }
    }//GEN-LAST:event_back_delEActionPerformed

    private void deleteEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteEActionPerformed
        // TODO add your handling code here:
        String emp_id = e_id_del.getText();
        String emp_name = e_name_del.getText();

        String getDID = "";
        if (departmentName_del.getText().length() != 0) {
            getDID = "select \"dept_id\" from \"rDepartment\" where \"dept_name\" = " + "'"
                    + departmentName_del.getText() + "'";
        }

        System.out.println(getDID);
        String d_id = "";

        if (getDID.length() != 0) {
            try {
                Statement st = connectOracle.conn.createStatement();
                try (ResultSet rs = st.executeQuery(getDID)) {
                    if (rs.next()) {
                        d_id = rs.getString(1);
                    }
                    rs.close();
                }

            } catch (SQLException ex) {
                Logger.getLogger(ALL.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        String getJID = "";
        if (jobName_del.getText().length() != 0) {
            getJID = "select \"job_id\" from \"rJob\" where \"job_name\" = " + "'"
                    + jobName_del.getText() + "'";
        }

        String JID = "";

        //System.out.println(getJID);
        if (getJID.length() != 0) {
            try {
                Statement st = connectOracle.conn.createStatement();
                try (ResultSet rs = st.executeQuery(getJID)) {
                    if (rs.next()) {
                        JID = rs.getString(1);
                    }
                    rs.close();
                }

            } catch (SQLException ex) {
                Logger.getLogger(ALL.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        boolean got = false;
        String del = "delete from \"rEmployee\" where ";
        if (emp_id.length() != 0) {
            if (!got) {
                got = true;
                del += "\"e_id\" = " + emp_id;
            } else {
                del += " and \"e_id\" = " + emp_id;
            }
        }

        if (emp_name.length() != 0) {
            if (!got) {
                got = true;
                del += "\"e_name\" = '" + emp_name + "'";
            } else {
                del += " and \"e_name\" = '" + emp_name + "'";
            }
        }

        if (d_id.length() != 0) {
            if (!got) {
                got = true;
                del += "\"dept_id\" = " + d_id;
            } else {
                del += " and \"dept_id\" = " + d_id;
            }
        }

        if (JID.length() != 0) {
            if (!got) {
                got = true;
                del += "\"job_id\" = " + JID;
            } else {
                del += " and \"job_id\" = " + JID;
            }
        }

        System.out.println(del);

        if (got) {
            boolean deleted = true;
            try {
                Statement st = connectOracle.conn.createStatement();
                st.executeUpdate(del);
            } catch (SQLException ex) {
                deleted = false;
                Logger.getLogger(ALL.class.getName()).log(Level.SEVERE, null, ex);
            }
            if (deleted) {
                System.out.println("Record deleted");
                e_id_del.setText("");
                e_name_del.setText("");
                departmentName_del.setText("");
                jobName_del.setText("");
            } else {
                System.out.println("Error in deletion");
                deleted = true;
            }
        } else {
            JOptionPane.showMessageDialog(this, "One or more Field(s) Empty.");
        }
    }//GEN-LAST:event_deleteEActionPerformed

    private void deleteFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteFActionPerformed
        // TODO add your handling code here:
        String food_id = f_id_del.getText();
        String food_name = f_name_del.getText();

        boolean got = false;
        String del = "delete from \"rFoodItem\" where ";
        if (food_id.length() != 0) {
            if (!got) {
                got = true;
                del += "\"food_id\" = " + food_id;
            } else {
                del += " and \"food_id\" = " + food_id;
            }
        }

        if (food_name.length() != 0) {
            if (!got) {
                got = true;
                del += "\"food_name\" = '" + food_name + "'";
            } else {
                del += " and \"food_name\" = '" + food_name + "'";
            }
        }
        System.out.println(del);

        boolean deleted = true;
        if (got) {
            try {
                Statement st = connectOracle.conn.createStatement();
                st.executeUpdate(del);
            } catch (SQLException ex) {
                deleted = false;
                Logger.getLogger(ALL.class.getName()).log(Level.SEVERE, null, ex);
            }

            if (deleted) {
                System.out.println("Record deleted");
                f_id_del.setText("");
                f_name_del.setText("");
            } else {
                System.out.println("Error in deletion");
                deleted = true;
            }
        } else {
            JOptionPane.showMessageDialog(this, "One or more Field(s) Empty.");
        }

    }//GEN-LAST:event_deleteFActionPerformed

    private void back_delFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_back_delFActionPerformed
        // TODO add your handling code here:
        deleteFormFood.setEnabled(false);
        deleteFormFood.setVisible(false);
        switch (curDepartment) {
            case -1:
                options.setEnabled(true);
                options.setVisible(true);
                break;
            case 1000:
                optionsKitchen.setEnabled(true);
                optionsKitchen.setVisible(true);
                break;
            case 2000:
                optionsWaitStuff.setEnabled(true);
                optionsWaitStuff.setVisible(true);
                break;
            case 3000:
                optionsManagement.setEnabled(true);
                optionsManagement.setVisible(true);
                break;
            default:
                break;
        }
    }//GEN-LAST:event_back_delFActionPerformed

    private void loginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loginActionPerformed
        // TODO add your handling code here:
        String query, pass;
        pass = "";
        boolean adm = false;

        //if admin what to do, not yet done
        curUserName = username.getText();
        if (username.getText().length() == 0 || password.getText().length() == 0) {
            JOptionPane.showMessageDialog(this, "One or more Field(s) Empty.");
        } else {

            if (isAdmin.isSelected() == false) {
                query = "select \"password\", \"dept_id\" from \"rLoginInfo\" where \"username\" = " + "'" + username.getText()
                        + "'";

                System.out.println(query);
            } else {
                query = "select \"password\" from \"rAdmin\" where \"username\" = " + "'" + username.getText() + "'";
                adm = true;
            }

            try {
                Statement st = connectOracle.conn.createStatement();
                try (ResultSet rs = st.executeQuery(query)) {
                    if (rs.next()) {
                        pass = rs.getString(1);
                        if (isAdmin.isSelected() == false) {
                            curDepartment = rs.getInt(2);
                        } else {
                            curDepartment = -1;
                        }
                    }
                    rs.close();
                }

            } catch (SQLException ex) {
                Logger.getLogger(ALL.class.getName()).log(Level.SEVERE, null, ex);
            }

            if (pass.length() != 0 && pass.equals(password.getText())) {
                loginForm.setEnabled(false);
                loginForm.setVisible(false);

                assignJob.removeAllItems();
                updateInfoEmp.removeAllItems();

                updateInfoEmp.addItem("Address");
                updateInfoEmp.addItem("Contact NO.");

                dept_name_admin.setEnabled(false); //department name for inserting emp by admin
                dept_name_admin.setVisible(false);

                switch (curDepartment) {
                    case -1:
                        options.setEnabled(true);
                        options.setVisible(true);

                        assignJob.addItem("chef");
                        assignJob.addItem("kitchen assistant");
                        assignJob.addItem("kitchen manager");

                        assignJob.addItem("waiter");
                        assignJob.addItem("service manager");

                        assignJob.addItem("accountant");
                        assignJob.addItem("accounting manager");

                        updateInfoEmp.addItem("Job");

                        break;
                    case 1000:
                        optionsKitchen.setEnabled(true);
                        optionsKitchen.setVisible(true);

                        assignJob.addItem("chef");
                        assignJob.addItem("kitchen assistant");

                        break;
                    case 2000:
                        optionsWaitStuff.setEnabled(true);
                        optionsWaitStuff.setVisible(true);

                        assignJob.addItem("waiter");
                        break;
                    case 3000:
                        optionsManagement.setEnabled(true);
                        optionsManagement.setVisible(true);

                        assignJob.addItem("accountant");
                        break;
                    default:
                        break;
                }
            } else {
                JOptionPane.showMessageDialog(this, "Wrong username or password.");
            }
        }

        username.setText("");
        password.setText("");
        isAdmin.setSelected(false);

    }//GEN-LAST:event_loginActionPerformed

    private void backEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backEActionPerformed
        // TODO add your handling code here:
        insertFormEmp.setEnabled(false);
        insertFormEmp.setVisible(false);

        switch (curDepartment) {
            case -1:

                dept_name_admin.setEnabled(false);
                dept_name_admin.setVisible(false);

                getDepartment.setText("");

                options.setEnabled(true);
                options.setVisible(true);

                break;
            case 1000:
                optionsKitchen.setEnabled(true);
                optionsKitchen.setVisible(true);
                break;
            case 2000:
                optionsWaitStuff.setEnabled(true);
                optionsWaitStuff.setVisible(true);
                break;
            case 3000:
                optionsManagement.setEnabled(true);
                optionsManagement.setVisible(true);
                break;
            default:
                break;
        }
    }//GEN-LAST:event_backEActionPerformed

    private void submitEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitEActionPerformed
        // TODO add your handling code here:
        int curEmpID = 0;

        String query = "Select max(\"e_id\") from \"rEmployee\"";

        try {
            Statement st = connectOracle.conn.createStatement();
            try (ResultSet rs = st.executeQuery(query)) {
                if (rs.next()) {
                    curEmpID = rs.getInt(1);
                }
                rs.close();
            }

        } catch (SQLException ex) {
            Logger.getLogger(ALL.class.getName()).log(Level.SEVERE, null, ex);
        }

        curEmpID++;

        String emp_id = Integer.toString(curEmpID);
        String emp_name = e_name.getText();
        String addr = address.getText();
        String cntctNO = contactNO.getText();

        //int x = assignJob.getSelectedIndex();
        String getJID = "select \"job_id\" from \"rJob\" where \"job_name\" = " + "'" + assignJob.getSelectedItem().toString() + "'";
        String JID = null;

        try {
            Statement st = connectOracle.conn.createStatement();
            try (ResultSet rs = st.executeQuery(getJID)) {
                if (rs.next()) {
                    JID = rs.getString(1);
                }
                rs.close();
            }

        } catch (SQLException ex) {
            Logger.getLogger(ALL.class.getName()).log(Level.SEVERE, null, ex);
        }

        if (emp_name.length() == 0 || cntctNO.length() == 0 || JID.length() == 0 || addr.length() == 0) {
            JOptionPane.showMessageDialog(this, "One or more Field(s) Empty.");
        } else {

            int tempCurDepartment = 0;
            if (curDepartment == -1) {
                int x = dept_name_admin.getSelectedIndex();
                switch (x) {
                    case 0:
                        tempCurDepartment = 1000;
                        break;
                    case 1:
                        tempCurDepartment = 3000;
                        break;
                    default:
                        tempCurDepartment = 2000;
                        break;
                }
            }

            String INS = "insert into \"rEmployee\" values (" + emp_id + ',' + "'" + emp_name + "'," + "'" + addr + "',"
                    + cntctNO + ',' + "to_date(to_char(sysdate, 'DD-MON-YYYY'), 'DD-MON-YYYY'),";

            if (curDepartment == -1) {
                INS += tempCurDepartment;
            } else {
                INS += curDepartment;
            }

            INS += "," + JID + ")";
            System.out.println(INS);

            boolean inserted = true;
            try {
                Statement st = connectOracle.conn.createStatement();
                st.executeUpdate(INS);
            } catch (SQLException ex) {
                inserted = false;
                Logger.getLogger(ALL.class.getName()).log(Level.SEVERE, null, ex);
            }
            if (inserted) {
                System.out.println("Record inserted in rEmployee table");
                e_name.setText("");
                address.setText("");
                contactNO.setText("");
                JOptionPane.showMessageDialog(this, "Data inserted successfully.");
            } else {
                System.out.println("Error in insertion");
                inserted = true;
            }
        }
    }//GEN-LAST:event_submitEActionPerformed

    private void deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteActionPerformed
        // TODO add your handling code here:
        options.setVisible(false);
        options.setEnabled(false);

        int x = delete.getSelectedIndex();
        //String table = (String)insert.getItemAt(x);

        if (x == 0) {
            deleteFormEmp.setVisible(true);
            deleteFormEmp.setEnabled(true);
        } else if (x == 1) {
            deleteFormFood.setVisible(true);
            deleteFormFood.setEnabled(true);
        } else if (x == 2) {
            deleteFormItem.setVisible(true);
            deleteFormItem.setEnabled(true);
        }
    }//GEN-LAST:event_deleteActionPerformed

    private void insertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_insertActionPerformed
        // TODO add your handling code here:

        options.setVisible(false);
        options.setEnabled(false);

        int x = insert.getSelectedIndex();
        //String table = (String)insert.getItemAt(x);

        if (x == 0) {
            insertFormEmp.setVisible(true);
            insertFormEmp.setEnabled(true);

            dept_name_admin.setEnabled(true);
            dept_name_admin.setVisible(true);

            getDepartment.setText("Department*:");

        } else if (x == 1) {
            insertFormFood.setVisible(true);
            insertFormFood.setEnabled(true);
        } else if (x == 2) {
            insertFormItem.setVisible(true);
            insertFormItem.setEnabled(true);
        }
    }//GEN-LAST:event_insertActionPerformed

    private void insertKitchenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_insertKitchenActionPerformed
        // TODO add your handling code here:
        optionsKitchen.setVisible(false);
        optionsKitchen.setEnabled(false);

        int x = insertKitchen.getSelectedIndex();
        //String table = (String)insert.getItemAt(x);

        if (x == 0) {
            insertFormEmp.setVisible(true);
            insertFormEmp.setEnabled(true);
        } else if (x == 1) {
            insertFormFood.setVisible(true);
            insertFormFood.setEnabled(true);
        }
    }//GEN-LAST:event_insertKitchenActionPerformed

    private void deleteKitchenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteKitchenActionPerformed
        // TODO add your handling code here:
        optionsKitchen.setVisible(false);
        optionsKitchen.setEnabled(false);

        int x = deleteKitchen.getSelectedIndex();
        //String table = (String)insert.getItemAt(x);

        if (x == 0) {
            deleteFormEmp.setVisible(true);
            deleteFormEmp.setEnabled(true);
        } else if (x == 1) {
            deleteFormFood.setVisible(true);
            deleteFormFood.setEnabled(true);
        }
    }//GEN-LAST:event_deleteKitchenActionPerformed

    private void insertWaitStuffActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_insertWaitStuffActionPerformed
        // TODO add your handling code here:
        optionsWaitStuff.setVisible(false);
        optionsWaitStuff.setEnabled(false);

        int x = insertWaitStuff.getSelectedIndex();
        //String table = (String)insert.getItemAt(x);

        if (x == 0) {
            insertFormEmp.setVisible(true);
            insertFormEmp.setEnabled(true);
        }

    }//GEN-LAST:event_insertWaitStuffActionPerformed

    private void deleteWaitStuffActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteWaitStuffActionPerformed
        // TODO add your handling code here:
        // TODO add your handling code here:
        optionsWaitStuff.setVisible(false);
        optionsWaitStuff.setEnabled(false);

        int x = deleteWaitStuff.getSelectedIndex();
        //String table = (String)insert.getItemAt(x);

        if (x == 0) {
            deleteFormEmp.setVisible(true);
            deleteFormEmp.setEnabled(true);
        } else if (x == 1) {
            deleteFormFood.setVisible(true);
            deleteFormFood.setEnabled(true);
        }
    }//GEN-LAST:event_deleteWaitStuffActionPerformed

    private void insertManagementActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_insertManagementActionPerformed
        // TODO add your handling code here:
        optionsManagement.setVisible(false);
        optionsManagement.setEnabled(false);

        int x = insertManagement.getSelectedIndex();
        //String table = (String)insert.getItemAt(x);

        if (x == 0) {
            insertFormEmp.setVisible(true);
            insertFormEmp.setEnabled(true);

        } else {
            item.removeAllItems();

            String query = "select \"food_name\" from \"rFoodItem\" order by \"food_name\"";
            System.out.println(query);

            try {
                Statement st = connectOracle.conn.createStatement();
                try (ResultSet rs = st.executeQuery(query)) {
                    while (rs.next()) {
                        item.addItem(rs.getString(1));
                    }
                    rs.close();
                }

            } catch (SQLException ex) {
                Logger.getLogger(ALL.class.getName()).log(Level.SEVERE, null, ex);
            }

            insertFormBills.setVisible(true);
            insertFormBills.setEnabled(true);

        }
    }//GEN-LAST:event_insertManagementActionPerformed

    private void deleteManagementActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteManagementActionPerformed
        // TODO add your handling code here:
        optionsManagement.setVisible(false);
        optionsManagement.setEnabled(false);

        int x = deleteManagement.getSelectedIndex();
        //String table = (String)insert.getItemAt(x);

        if (x == 0) {
            deleteFormEmp.setVisible(true);
            deleteFormEmp.setEnabled(true);
        } else {
            deleteFormBills.setVisible(true);
            deleteFormBills.setEnabled(true);
        }
    }//GEN-LAST:event_deleteManagementActionPerformed

    private void LogOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LogOutActionPerformed
        // TODO add your handling code here:
        options.setEnabled(false);
        options.setVisible(false);

        loginForm.setEnabled(true);
        loginForm.setVisible(true);
    }//GEN-LAST:event_LogOutActionPerformed

    private void updateKitchenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateKitchenActionPerformed
        // TODO add your handling code here:
        int x = updateKitchen.getSelectedIndex();
        optionsKitchen.setEnabled(false);
        optionsKitchen.setVisible(false);

        if (x == 0) {
            updateFormEmp.setEnabled(true);
            updateFormEmp.setVisible(true);

        } else if (x == 1) {
            updateFormFood.setEnabled(true);
            updateFormFood.setVisible(true);
        }
    }//GEN-LAST:event_updateKitchenActionPerformed

    private void queryKitchenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_queryKitchenActionPerformed
        // TODO add your handling code here:

        int x = queryKitchen.getSelectedIndex();

        if (x == 0) {
            optionsKitchen.setEnabled(false);
            optionsKitchen.setVisible(false);

            queryFormEmp.setEnabled(true);
            queryFormEmp.setVisible(true);

            /*condRelQemp.setVisible(false);
            condRelQemp.setEnabled(false);*/
        } else if (x == 1) {
            optionsKitchen.setEnabled(false);
            optionsKitchen.setVisible(false);

            queryFormFood.setEnabled(true);
            queryFormFood.setVisible(true);

            /*condRelQfood.setVisible(false);
            condRelQfood.setEnabled(false);*/
        }
    }//GEN-LAST:event_queryKitchenActionPerformed

    private void LogOutManagementActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LogOutManagementActionPerformed
        // TODO add your handling code here:
        optionsManagement.setEnabled(false);
        optionsManagement.setVisible(false);

        loginForm.setEnabled(true);
        loginForm.setVisible(true);
    }//GEN-LAST:event_LogOutManagementActionPerformed

    private void LogOutWaitStuffActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LogOutWaitStuffActionPerformed
        // TODO add your handling code here:
        optionsWaitStuff.setEnabled(false);
        optionsWaitStuff.setVisible(false);

        loginForm.setEnabled(true);
        loginForm.setVisible(true);
    }//GEN-LAST:event_LogOutWaitStuffActionPerformed

    private void LogOutKitchenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LogOutKitchenActionPerformed
        // TODO add your handling code here:
        optionsKitchen.setEnabled(false);
        optionsKitchen.setVisible(false);

        loginForm.setEnabled(true);
        loginForm.setVisible(true);
    }//GEN-LAST:event_LogOutKitchenActionPerformed

    private void submitBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitBActionPerformed
        // TODO add your handling code here:
        ArrayList<Integer> foodIDArray = new ArrayList<>();
        String temp;
        int total = 0, price = 0, id;

        for (int i = 0; i < items.size(); i++) {
            temp = items.get(i);
            String query = "select \"food_id\", \"food_price\" from \"rFoodItem\" where \"food_name\" = '" + temp + "'";

            try {
                Statement st = connectOracle.conn.createStatement();
                try (ResultSet rs = st.executeQuery(query)) {
                    if (rs.next()) {
                        id = rs.getInt(1);
                        price = rs.getInt(2);
                        foodIDArray.add(id);
                    }
                    rs.close();
                }

            } catch (SQLException ex) {
                Logger.getLogger(ALL.class.getName()).log(Level.SEVERE, null, ex);
            }

            total += price * amountItem.get(i);
        }

        String INS;
        int curBillID = 0;

        String query = "Select max(\"bill_id\") from \"rBills\"";

        try {
            Statement st = connectOracle.conn.createStatement();
            try (ResultSet rs = st.executeQuery(query)) {
                if (rs.next()) {
                    curBillID = rs.getInt(1);
                }
                rs.close();
            }

        } catch (SQLException ex) {
            Logger.getLogger(ALL.class.getName()).log(Level.SEVERE, null, ex);
        }

        curBillID++;

        INS = "insert into \"rBills\" values (" + Integer.toString(curBillID)
                + ", to_date(to_char(sysdate, 'DD-MON-YYYY'), 'DD-MON-YYYY'), " + Integer.toString(total) + ", 3000)";

        System.out.println(INS);
        if (items.size() > 0) {
            try {
                Statement st = connectOracle.conn.createStatement();
                st.executeUpdate(INS);
            } catch (SQLException ex) {
                Logger.getLogger(ALL.class.getName()).log(Level.SEVERE, null, ex);
            }

            for (int i = 0; i < foodIDArray.size(); i++) {
                INS = "insert into \"rConsumption\" values (" + Integer.toString(curBillID) + ", " + Integer.toString(foodIDArray.get(i))
                        + ", " + Integer.toString(amountItem.get(i)) + ")";
                try {
                    Statement st = connectOracle.conn.createStatement();
                    st.executeUpdate(INS);
                } catch (SQLException ex) {
                    Logger.getLogger(ALL.class.getName()).log(Level.SEVERE, null, ex);
                }
                JOptionPane.showMessageDialog(this, "Data inserted successfully.");
            }
        } else {

        }
        amountItem.clear();
        items.clear();
    }//GEN-LAST:event_submitBActionPerformed

    private void addBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBActionPerformed
        // TODO add your handling code here:
        if (amount.getText().length() > 0) {
            Integer count = Integer.parseInt(amount.getText());
            //System.out.println(count);

            String name = item.getItemAt(item.getSelectedIndex());

            items.add(name);
            amountItem.add(count);

            amount.setText("");
        } else {
            JOptionPane.showMessageDialog(this, "Amount Field Empty.");
        }

    }//GEN-LAST:event_addBActionPerformed

    private void backBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBActionPerformed
        // TODO add your handling code here:
        amountItem.clear();
        items.clear();

        insertFormBills.setEnabled(false);
        insertFormBills.setVisible(false);

        optionsManagement.setEnabled(true);
        optionsManagement.setVisible(true);
    }//GEN-LAST:event_backBActionPerformed

    private void backDelBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backDelBActionPerformed
        // TODO add your handling code here:
        String bill_id = billID.getText();
        String bill_date = null;

        boolean got = false;
        String del = "delete from \"rBills\" where ";
        if (bill_id.length() != 0) {
            if (!got) {
                got = true;
                del += "\"bill_id\" = " + bill_id;
            } else {
                del += " and \"bill_id\" = " + bill_id;
            }
        }

        if (dayB.getSelectedIndex() != 0 && monB.getSelectedIndex() != 0 && yearB.getSelectedIndex() != 0) {

            bill_date = dayB.getItemAt(dayB.getSelectedIndex()) + "-" + monB.getItemAt(monB.getSelectedIndex())
                    + "-" + yearB.getItemAt(yearB.getSelectedIndex());
            if (!got) {
                got = true;
                del += "to_date(to_char(\"bill_date\", 'DD-Month-YYYY'), 'DD-Month-YYYY') = to_date('"
                        + bill_date + "', 'DD-Month-YYYY')";
            } else {
                del += " and \"bill_date\" = to_date('" + bill_date + "','DD-Month-YYYY')";
            }
        }
        System.out.println(del);

        if (got) {
            boolean deleted = true;
            try {
                Statement st = connectOracle.conn.createStatement();
                st.executeUpdate(del);
            } catch (SQLException ex) {
                deleted = false;
                Logger.getLogger(ALL.class.getName()).log(Level.SEVERE, null, ex);
            }
            if (deleted) {
                System.out.println("Record deleted");
                billID.setText("");

            } else {
                System.out.println("Error in deletion");
                deleted = true;
            }
        } else {
            JOptionPane.showMessageDialog(this, "One or more Field(s) Empty.");
        }
    }//GEN-LAST:event_backDelBActionPerformed

    private void backDelBillActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backDelBillActionPerformed
        // TODO add your handling code here:
        optionsManagement.setEnabled(true);
        optionsManagement.setVisible(true);

        deleteFormBills.setEnabled(false);
        deleteFormBills.setVisible(false);
    }//GEN-LAST:event_backDelBillActionPerformed

    private void addCondQempActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addCondQempActionPerformed
        // TODO add your handling code here:

        if (QempInput.getText().length() > 0) {
            String test = null;
            if (extremeQuerySuffix.length() == 0) {
                extremeQuerySuffix = " where ";
            }
            if (queryAnd) {
                extremeQuerySuffix += " and ";
            } else {
                queryAnd = true;
            }

            int index = condQemp.getSelectedIndex();
            switch (index) {
                case 0:
                    test = "\"e_id\"";
                    break;
                case 1:
                    test = "\"e_name\"";
                    break;
                case 2:
                    test = "\"salary\"";
                    break;
                case 3:
                    test = "\"hire_date\"";
                    break;
                case 4:
                    test = "\"dept_name\"";
                    break;
                case 5:
                    test = "\"job_name\"";
                    break;
                default:
                    break;
            }

            String rel = "";
            int x = condRelQemp.getSelectedIndex();
            if (x == 0) {
                rel = " = ";
            } else if (x == 1) {
                rel = " >= ";
            } else if (x == 2) {
                rel = " > ";
            } else if (x == 3) {
                rel = " <= ";
            } else {
                rel = " < ";
            }
            extremeQuerySuffix += test + rel + "'" + QempInput.getText() + "'";
        }

        System.out.println(extremeQuerySuffix);

        QempInput.setText("");
        condRelQemp.setSelectedIndex(0);
    }//GEN-LAST:event_addCondQempActionPerformed

    private void queryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_queryActionPerformed
        // TODO add your handling code here:
        int x = query.getSelectedIndex();

        if (x == 0) {
            options.setEnabled(false);
            options.setVisible(false);

            queryFormEmp.setEnabled(true);
            queryFormEmp.setVisible(true);

            /*condRelQemp.setVisible(false);
            condRelQemp.setEnabled(false);*/
        } else if (x == 1) {
            options.setEnabled(false);
            options.setVisible(false);

            queryFormFood.setEnabled(true);
            queryFormFood.setVisible(true);

            /*condRelQfood.setVisible(false);
            condRelQfood.setEnabled(false);*/
        } else if (x == 2) {
            options.setEnabled(false);
            options.setVisible(false);

            queryFormBill.setEnabled(true);
            queryFormBill.setVisible(true);

            condRelQbill.setVisible(false);
            condRelQbill.setEnabled(false);
        } else if (x == 3) {
            options.setEnabled(false);
            options.setVisible(false);

            queryFormItem.setEnabled(true);
            queryFormItem.setVisible(true);
        }
    }//GEN-LAST:event_queryActionPerformed

    private void queryWaitStuffActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_queryWaitStuffActionPerformed
        // TODO add your handling code here:
        int x = queryWaitStuff.getSelectedIndex();

        if (x == 0) {
            optionsWaitStuff.setEnabled(false);
            optionsWaitStuff.setVisible(false);

            queryFormEmp.setEnabled(true);
            queryFormEmp.setVisible(true);

            /*condRelQemp.setVisible(false);
            condRelQemp.setEnabled(false);*/
        }
    }//GEN-LAST:event_queryWaitStuffActionPerformed

    private void queryManagementActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_queryManagementActionPerformed
        // TODO add your handling code here:
        int x = queryManagement.getSelectedIndex();

        if (x == 0) {
            optionsManagement.setEnabled(false);
            optionsManagement.setVisible(false);

            queryFormEmp.setEnabled(true);
            queryFormEmp.setVisible(true);

            /*condRelQemp.setVisible(false);
            condRelQemp.setEnabled(false);*/
        } else if (x == 1) {
            optionsManagement.setEnabled(false);
            optionsManagement.setVisible(false);

            queryFormBill.setEnabled(true);
            queryFormBill.setVisible(true);

            /*condRelQbill.setVisible(false);
            condRelQbill.setEnabled(false);*/
        }
    }//GEN-LAST:event_queryManagementActionPerformed

    private void backQempActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backQempActionPerformed
        // TODO add your handling code here:
        QempInput.setText("");
        condRelQemp.setSelectedIndex(0);
        queryFormEmp.setEnabled(false);
        queryFormEmp.setVisible(false);

        switch (curDepartment) {
            case -1:
                options.setEnabled(true);
                options.setVisible(true);
                break;
            case 1000:
                optionsKitchen.setEnabled(true);
                optionsKitchen.setVisible(true);
                break;
            case 2000:
                optionsWaitStuff.setEnabled(true);
                optionsWaitStuff.setVisible(true);
                break;
            case 3000:
                optionsManagement.setEnabled(true);
                optionsManagement.setVisible(true);
                break;
            default:
                break;
        }

        emp_id.setSelected(false);
        emp_name.setSelected(false);
        emp_sal.setSelected(false);
        emp_address.setSelected(false);
        emp_contactno.setSelected(false);
        emp_hire_date.setSelected(false);
        emp_dept_name.setSelected(false);
        emp_job_name.setSelected(false);
        emp_manager_name.setSelected(false);
    }//GEN-LAST:event_backQempActionPerformed

    private void condQempActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_condQempActionPerformed
        // TODO add your handling code here:
        int x = condQemp.getSelectedIndex();
        if (x == 3) {
            JOptionPane.showMessageDialog(this, "Please give the date in 'DD-MON-YYYY' format.");
        }

        /*else{
            condRelQemp.setEnabled(false);
            condRelQemp.setVisible(false);
        }*/
    }//GEN-LAST:event_condQempActionPerformed

    private void showQempActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showQempActionPerformed
        // TODO add your handling code here:
        boolean first = true;
        int col = 0;

        ArrayList<String> columnName = new ArrayList<>();
        extremeQueryPrefix = "select ";

        if (emp_id.isSelected()) {

            columnName.add("Employee ID");
            col++;
            if (!first) {
                extremeQueryPrefix += ", \"e_id\"";
            } else {
                extremeQueryPrefix += "\"e_id\"";
                first = false;
            }
        }

        if (emp_name.isSelected()) {

            columnName.add("Name");
            col++;
            if (!first) {
                extremeQueryPrefix += ", \"e_name\"";
            } else {
                extremeQueryPrefix += "\"e_name\"";
                first = false;
            }
        }

        if (emp_sal.isSelected()) {

            columnName.add("Salary");
            col++;
            if (!first) {
                extremeQueryPrefix += ", \"salary\"";
            } else {
                extremeQueryPrefix += "\"salary\"";
                first = false;
            }
        }

        if (emp_address.isSelected()) {

            columnName.add("Address");
            col++;
            if (!first) {
                extremeQueryPrefix += ", \"address\"";
            } else {
                extremeQueryPrefix += "\"address\"";
                first = false;
            }
        }

        if (emp_contactno.isSelected()) {

            columnName.add("Contact NO.");
            col++;
            if (!first) {
                extremeQueryPrefix += ", \"contactno\"";
            } else {
                extremeQueryPrefix += "\"contactno\"";
                first = false;
            }
        }

        if (emp_hire_date.isSelected()) {

            columnName.add("Hire Date");
            col++;
            if (!first) {
                extremeQueryPrefix += ", \"hire_date\"";
            } else {
                extremeQueryPrefix += "\"hire_date\"";
                first = false;
            }
        }

        if (emp_dept_name.isSelected()) {

            columnName.add("Department");
            col++;
            if (!first) {
                extremeQueryPrefix += ", \"dept_name\"";
            } else {
                extremeQueryPrefix += "\"dept_name\"";
                first = false;
            }
        }

        if (emp_job_name.isSelected()) {

            columnName.add("Job");
            col++;
            if (!first) {
                extremeQueryPrefix += ", \"job_name\"";
            } else {
                extremeQueryPrefix += "\"job_name\"";
                first = false;
            }
        }

        if (emp_manager_name.isSelected()) {

            columnName.add("Manager Name");
            col++;
            if (!first) {
                extremeQueryPrefix += ", IDNameGet('', \"manager_id\")";
            } else {
                extremeQueryPrefix += " IDNameGet('', \"manager_id\")";
                first = false;
            }
        }
        ArrayList< ArrayList<String>> data = new ArrayList<>();
        ArrayList<String> rowData = new ArrayList<>();

        if (col == 0) {
            System.out.println("Please check the fields you want to see.");
        } else {
            extremeQuery = extremeQueryPrefix + qTemplate1 + extremeQuerySuffix;

            System.out.println(extremeQuery);

            try {
                Statement st = connectOracle.conn.createStatement();
                try (ResultSet rs = st.executeQuery(extremeQuery)) {
                    //int rowCount = 0;
                    while (rs.next()) {
                        for (int i = 1; i <= col; i++) {
                            //System.out.print(rs.getString(i) + " ");
                            rowData.add(rs.getString(i));
                            System.out.println(rowData.get(i - 1));
                        }

                        data.add((ArrayList<String>) rowData.clone());
                        //System.out.println("");

                        rowData.clear();
                    }
                    rs.close();
                }

            } catch (SQLException ex) {
                Logger.getLogger(ALL.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        String[][] send = new String[data.size()][col];
        for (int i = 0; i < data.size(); i++) {
            for (int j = 0; j < col; j++) {
                send[i][j] = data.get(i).get(j);
            }
        }

        String[] sendCol = new String[columnName.size()];
        sendCol = columnName.toArray(sendCol);

        System.out.println(Arrays.toString(sendCol));

        queryResult result = new queryResult(send, sendCol);
        result.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        result.pack();
        result.setVisible(true);

        emp_id.setSelected(false);
        emp_name.setSelected(false);
        emp_sal.setSelected(false);
        emp_address.setSelected(false);
        emp_contactno.setSelected(false);
        emp_hire_date.setSelected(false);
        emp_dept_name.setSelected(false);
        emp_job_name.setSelected(false);
        emp_manager_name.setSelected(false);

        extremeQuery = "";
        extremeQueryPrefix = "";
        extremeQuerySuffix = "";
        condRelQemp.setSelectedIndex(0);

        queryAnd = false;
    }//GEN-LAST:event_showQempActionPerformed

    private void showQfoodActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showQfoodActionPerformed
        // TODO add your handling code here:
        boolean first = true;
        int col = 0;

        ArrayList<String> columnName = new ArrayList<>();
        extremeQueryPrefix = "select ";

        if (F_id.isSelected()) {

            columnName.add("Food ID");
            col++;
            if (!first) {
                extremeQueryPrefix += ", \"food_id\"";
            } else {
                extremeQueryPrefix += "\"food_id\"";
                first = false;
            }
        }

        if (F_name.isSelected()) {

            columnName.add("Name");
            col++;
            if (!first) {
                extremeQueryPrefix += ", \"food_name\"";
            } else {
                extremeQueryPrefix += "\"food_name\"";
                first = false;
            }
        }

        if (F_category.isSelected()) {

            columnName.add("Category");
            col++;
            if (!first) {
                extremeQueryPrefix += ", \"category\"";
            } else {
                extremeQueryPrefix += "\"category\"";
                first = false;
            }
        }

        if (F_price.isSelected()) {

            columnName.add("Unit Price");
            col++;
            if (!first) {
                extremeQueryPrefix += ", \"food_price\"";
            } else {
                extremeQueryPrefix += "\"food_price\"";
                first = false;
            }
        }

        ArrayList< ArrayList<String>> data = new ArrayList<>();
        ArrayList<String> rowData = new ArrayList<>();

        if (col == 0) {
            System.out.println("Please check the fields you want to see.");
        } else {
            extremeQuery = extremeQueryPrefix + " from \"rFoodItem\" " + extremeQuerySuffix;

            System.out.println(extremeQuery);

            try {
                Statement st = connectOracle.conn.createStatement();
                try (ResultSet rs = st.executeQuery(extremeQuery)) {
                    //int rowCount = 0;
                    while (rs.next()) {
                        for (int i = 1; i <= col; i++) {
                            //System.out.print(rs.getString(i) + " ");
                            rowData.add(rs.getString(i));
                            //System.out.println(rowData.get(i-1));
                        }

                        data.add((ArrayList<String>) rowData.clone());
                        //System.out.println("");

                        rowData.clear();
                    }
                    rs.close();
                }

            } catch (SQLException ex) {
                Logger.getLogger(ALL.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        for (int i = 0; i < data.size(); i++) {
            for (int j = 0; j < 1; j++) {
                System.out.println(data.get(i).get(j));
            }
            //System.out.println(data.get(i).size());
        }

        String[][] send = new String[data.size()][col];
        for (int i = 0; i < data.size(); i++) {
            for (int j = 0; j < col; j++) {
                send[i][j] = data.get(i).get(j);
            }
        }

        String[] sendCol = new String[columnName.size()];
        sendCol = columnName.toArray(sendCol);

        System.out.println(Arrays.toString(sendCol));

        queryResult result = new queryResult(send, sendCol);
        result.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        result.pack();
        result.setVisible(true);

        F_id.setSelected(false);
        F_name.setSelected(false);
        F_category.setSelected(false);
        F_price.setSelected(false);

        extremeQuery = "";
        extremeQueryPrefix = "";
        extremeQuerySuffix = "";
        condRelQfood.setSelectedIndex(0);

        queryAnd = false;
    }//GEN-LAST:event_showQfoodActionPerformed

    private void backQfoodActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backQfoodActionPerformed
        // TODO add your handling code here:
        QfoodInput.setText("");
        queryFormFood.setEnabled(false);
        queryFormFood.setVisible(false);

        switch (curDepartment) {
            case -1:
                options.setEnabled(true);
                options.setVisible(true);
                break;
            case 1000:
                optionsKitchen.setEnabled(true);
                optionsKitchen.setVisible(true);
                break;
            case 2000:
                optionsWaitStuff.setEnabled(true);
                optionsWaitStuff.setVisible(true);
                break;
            case 3000:
                optionsManagement.setEnabled(true);
                optionsManagement.setVisible(true);
                break;
            default:
                break;
        }

        F_id.setSelected(false);
        F_name.setSelected(false);
        F_category.setSelected(false);
        F_price.setSelected(false);
        condRelQfood.setSelectedIndex(0);
    }//GEN-LAST:event_backQfoodActionPerformed

    private void addCondFoodActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addCondFoodActionPerformed
        // TODO add your handling code here:
        if (QfoodInput.getText().length() > 0) {
            String test = null;
            if (extremeQuerySuffix.length() == 0) {
                extremeQuerySuffix = " where ";
            }
            if (queryAnd) {
                extremeQuerySuffix += " and ";
            } else {
                queryAnd = true;
            }

            int index = condQfood.getSelectedIndex();
            switch (index) {
                case 0:
                    test = "\"food_id\"";
                    break;
                case 1:
                    test = "\"food_name\"";
                    break;
                case 2:
                    test = "\"category\"";
                    break;
                case 3:
                    test = "\"food_price\"";
                    break;
                default:
                    break;
            }

            String rel = "";
            int x = condRelQfood.getSelectedIndex();
            if (x == 0) {
                rel = " = ";
            } else if (x == 1) {
                rel = " >= ";
            } else if (x == 2) {
                rel = " > ";
            } else if (x == 3) {
                rel = " <= ";
            } else {
                rel = " < ";
            }
            extremeQuerySuffix += test + rel + "'" + QfoodInput.getText() + "'";
        }

        System.out.println(extremeQuerySuffix);

        QfoodInput.setText("");
        condRelQfood.setSelectedIndex(0);

    }//GEN-LAST:event_addCondFoodActionPerformed

    private void addCondBillActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addCondBillActionPerformed
        // TODO add your handling code here:
        if (QbillInput.getText().length() > 0) {
            String test = null;
            if (extremeQuerySuffix.length() == 0) {
                extremeQuerySuffix = " where ";
            }
            if (queryAnd) {
                extremeQuerySuffix += " and ";
            } else {
                queryAnd = true;
            }

            int index = condQbill.getSelectedIndex();
            switch (index) {
                case 0:
                    test = "\"bill_id\"";
                    break;
                default:
                    test = "\"bill_date\"";
                    break;
            }

            String rel = "";
            int x = condRelQbill.getSelectedIndex();
            if (x == 0) {
                rel = " = ";
            } else if (x == 1) {
                rel = " >= ";
            } else if (x == 2) {
                rel = " > ";
            } else if (x == 3) {
                rel = " <= ";
            } else {
                rel = " < ";
            }
            extremeQuerySuffix += test + rel + "'" + QbillInput.getText() + "'";
        }

        System.out.println(extremeQuerySuffix);

        QbillInput.setText("");
        condRelQbill.setSelectedIndex(0);

    }//GEN-LAST:event_addCondBillActionPerformed

    private void showQbillActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showQbillActionPerformed
        // TODO add your handling code here:
        boolean first = true;
        int col = 0;

        ArrayList<String> columnName = new ArrayList<>();
        extremeQueryPrefix = "select ";

        if (details.isSelected()) {

            columnName.add("Bill ID");
            columnName.add("Date");
            columnName.add("Food Name");
            columnName.add("Quantity");
            columnName.add("total");

            col = 5;

            extremeQueryPrefix += " \"bill_id\", \"bill_date\", fName, qty, qty*UPrice as Price ";
        } else if (brief.isSelected()) {

            columnName.add("Bill ID");
            columnName.add("Date");
            columnName.add("Total");

            col = 3;

            extremeQueryPrefix += " \"bill_id\", \"bill_date\", \"bill_total\" ";
        }

        ArrayList< ArrayList<String>> data = new ArrayList<>();
        ArrayList<String> rowData = new ArrayList<>();

        if (col == 0) {
            System.out.println("Please check the fields you want to see.");
        } else if (col == 3) {

            extremeQuery = extremeQueryPrefix + " from \"rBills\" " + extremeQuerySuffix + " order by \"bill_id\"";

            System.out.println(extremeQuery);

            try {
                Statement st = connectOracle.conn.createStatement();
                try (ResultSet rs = st.executeQuery(extremeQuery)) {
                    //int rowCount = 0;
                    while (rs.next()) {
                        for (int i = 1; i <= col; i++) {
                            //System.out.print(rs.getString(i) + " ");
                            rowData.add(rs.getString(i));
                            //System.out.println(rowData.get(i-1));
                        }

                        data.add((ArrayList<String>) rowData.clone());
                        //System.out.println("");

                        rowData.clear();
                    }
                    rs.close();
                }

            } catch (SQLException ex) {
                Logger.getLogger(ALL.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            int sumTotal = 0;

            extremeQuery = extremeQueryPrefix + qTemplate2 + extremeQuerySuffix + " order by \"bill_id\"";

            System.out.println(extremeQuery);

            try {
                Statement st = connectOracle.conn.createStatement();
                try (ResultSet rs = st.executeQuery(extremeQuery)) {
                    int rowCount = 0;
                    String prevBillID = "";
                    while (rs.next()) {
                        for (int i = 1; i <= col; i++) {
                            //System.out.print(rs.getString(i) + " ");
                            if (i == 1) {
                                String curBillID = rs.getString(i);
                                if (prevBillID.equals(curBillID)) {
                                    rowData.add("");
                                } else {
                                    rowData.add(curBillID);
                                    prevBillID = curBillID;
                                }
                            } else if (i == 2 && rowData.get(0).length() == 0) {
                                rs.getString(i);
                                rowData.add("");
                            } else {
                                rowData.add(rs.getString(i));
                            }

                            if (i == col) {
                                sumTotal += Integer.parseInt(rowData.get(4));
                            }

                            //System.out.println(rowData.get(i-1));
                        }

                        data.add((ArrayList<String>) rowData.clone());
                        //System.out.println("");

                        rowData.clear();
                    }
                    rs.close();
                }

            } catch (SQLException ex) {
                Logger.getLogger(ALL.class.getName()).log(Level.SEVERE, null, ex);
            }

            rowData.add("");
            rowData.add("");

            rowData.add("");
            rowData.add("                   TOTAL = ");
            rowData.add("" + sumTotal);
            data.add((ArrayList<String>) rowData.clone());
        }

        String[][] send = new String[data.size()][col];
        for (int i = 0; i < data.size(); i++) {
            for (int j = 0; j < col; j++) {
                send[i][j] = data.get(i).get(j);
            }
        }

        String[] sendCol = new String[columnName.size()];
        sendCol = columnName.toArray(sendCol);

        System.out.println(Arrays.toString(sendCol));

        queryResult result = new queryResult(send, sendCol);
        result.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        result.pack();
        result.setVisible(true);

        brief.setSelected(false);
        details.setSelected(false);

        extremeQuery = "";
        extremeQueryPrefix = "";
        extremeQuerySuffix = "";
        condRelQbill.setSelectedIndex(0);

        queryAnd = false;

    }//GEN-LAST:event_showQbillActionPerformed

    private void backQbillActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backQbillActionPerformed
        // TODO add your handling code here:
        QbillInput.setText("");
        queryFormBill.setEnabled(false);
        queryFormBill.setVisible(false);

        switch (curDepartment) {
            case -1:
                options.setEnabled(true);
                options.setVisible(true);
                break;
            case 1000:
                optionsKitchen.setEnabled(true);
                optionsKitchen.setVisible(true);
                break;
            case 2000:
                optionsWaitStuff.setEnabled(true);
                optionsWaitStuff.setVisible(true);
                break;
            case 3000:
                optionsManagement.setEnabled(true);
                optionsManagement.setVisible(true);
                break;
            default:
                break;
        }

        brief.setSelected(false);
        details.setSelected(false);
        condRelQbill.setSelectedIndex(0);
    }//GEN-LAST:event_backQbillActionPerformed

    private void ViewLogsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ViewLogsActionPerformed
        // TODO add your handling code here:
        String query = "select * from \"rLogs\" order by \"change_type\" desc", take;

        ArrayList<String> columnName = new ArrayList<>();
        columnName.add("Date");
        columnName.add("Changed BY");
        columnName.add("Change Type");
        columnName.add("Employee ID");
        columnName.add("Old Job ID");
        columnName.add("New Job ID");
        columnName.add("Food ID");
        columnName.add("Old Food Price");
        columnName.add("New Food Price");

        ArrayList< ArrayList<String>> data = new ArrayList<>();
        ArrayList<String> rowData = new ArrayList<>();

        try {
            Statement st = connectOracle.conn.createStatement();
            try (ResultSet rs = st.executeQuery(query)) {
                //int rowCount = 0;
                while (rs.next()) {
                    for (int i = 1; i <= 9; i++) {
                        //System.out.print(rs.getString(i) + " ");
                        take = rs.getString(i);
                        if (take == null) {
                            rowData.add("---");
                        } else {
                            rowData.add(take);
                        }
                        //System.out.println(rowData.get(i-1));
                    }

                    data.add((ArrayList<String>) rowData.clone());
                    //System.out.println("");

                    rowData.clear();
                }
                rs.close();
            }

        } catch (SQLException ex) {
            Logger.getLogger(ALL.class.getName()).log(Level.SEVERE, null, ex);
        }

        String[][] send = new String[data.size()][9];
        for (int i = 0; i < data.size(); i++) {
            for (int j = 0; j < 9; j++) {
                send[i][j] = data.get(i).get(j);
            }
        }

        String[] sendCol = new String[columnName.size()];
        sendCol = columnName.toArray(sendCol);

        System.out.println(Arrays.toString(sendCol));

        queryResult result = new queryResult(send, sendCol);
        result.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        result.pack();
        result.setVisible(true);

    }//GEN-LAST:event_ViewLogsActionPerformed

    private void prevIncomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prevIncomeActionPerformed
        // TODO add your handling code here:
        //getIncome(numer)

        int x = prevIncome.getSelectedIndex(), days = 0;
        String tmsg = "Income of last";
        switch (x) {
            case 0:
                days = 30;
                tmsg += " month: ";
                break;
            case 1:
                days = 15;
                tmsg += " 15 days: ";
                break;
            case 2:
                days = 7;
                tmsg += " week: ";
                break;
            default:
                days = 1;
                tmsg += " day: ";
                break;
        }

        int result = 0;
        try {
            Statement st = connectOracle.conn.createStatement();
            try (ResultSet rs = st.executeQuery("select getIncome(" + Integer.toString(days) + ") from dual ")) {
                //int rowCount = 0;
                if (rs.next()) {
                    result = rs.getInt(1);
                }
                rs.close();
            }

        } catch (SQLException ex) {
            Logger.getLogger(ALL.class.getName()).log(Level.SEVERE, null, ex);
        }

        JOptionPane.showMessageDialog(this, tmsg + Integer.toString(result));
    }//GEN-LAST:event_prevIncomeActionPerformed

    private void condQbillActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_condQbillActionPerformed
        // TODO add your handling code here:
        int x = condQbill.getSelectedIndex();
        if (x == 1) {
            JOptionPane.showMessageDialog(this, "Please give the date in 'DD-MON-YYYY' format.");
        }
    }//GEN-LAST:event_condQbillActionPerformed

    private void updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateActionPerformed
        // TODO add your handling code here:
        int x = update.getSelectedIndex();
        options.setEnabled(false);
        options.setVisible(false);

        if (x == 0) {
            updateFormEmp.setEnabled(true);
            updateFormEmp.setVisible(true);

        } else if (x == 1) {
            updateFormJob.setEnabled(true);
            updateFormJob.setVisible(true);
        } else if (x == 2) {
            updateFormItem.setEnabled(true);
            updateFormItem.setVisible(true);
        }
    }//GEN-LAST:event_updateActionPerformed

    private void backUEmpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backUEmpActionPerformed
        // TODO add your handling code here:
        updateFormEmp.setEnabled(false);
        updateFormEmp.setVisible(false);
        switch (curDepartment) {
            case -1:
                options.setEnabled(true);
                options.setVisible(true);
                break;
            case 1000:
                optionsKitchen.setEnabled(true);
                optionsKitchen.setVisible(true);
                break;
            case 2000:
                optionsWaitStuff.setEnabled(true);
                optionsWaitStuff.setVisible(true);
                break;
            case 3000:
                optionsManagement.setEnabled(true);
                optionsManagement.setVisible(true);
                break;
            default:
                break;
        }
        updateCondEmpName.setText("");
        updateInfoEmpText.setText("");
    }//GEN-LAST:event_backUEmpActionPerformed

    private void updateWaitStuffActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateWaitStuffActionPerformed
        // TODO add your handling code here:
        int x = updateWaitStuff.getSelectedIndex();
        if (x == 0) {
            updateFormEmp.setEnabled(true);
            updateFormEmp.setVisible(true);
            optionsWaitStuff.setEnabled(false);
            optionsWaitStuff.setVisible(false);
        }
    }//GEN-LAST:event_updateWaitStuffActionPerformed

    private void updateManagementActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateManagementActionPerformed
        // TODO add your handling code here:
        int x = updateManagement.getSelectedIndex();
        if (x == 0) {
            updateFormEmp.setEnabled(true);
            updateFormEmp.setVisible(true);
            optionsManagement.setEnabled(false);
            optionsManagement.setVisible(false);
        }
    }//GEN-LAST:event_updateManagementActionPerformed

    private void submitUEmpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitUEmpActionPerformed
        // TODO add your handling code here:
        String check, exec = "update \"rEmployee\" SET ", jobName;
        int jobID = 0;
        check = updateCondEmpName.getText();
        if (check.length() == 0) {
            JOptionPane.showMessageDialog(this, "Please enter employee's name.");
        } else {

            int x = updateInfoEmp.getSelectedIndex();
            switch (x) {
                case 0:
                    exec += "\"address\" = '";
                    break;
                case 1:
                    exec += "\"contactno\" = '";
                    break;
                default:
                    exec += "\"job_id\" = '";

                    jobName = "select \"job_id\" from \"rJob\" where \"job_name\" = '" + updateInfoEmpText.getText() + "'";

                    try {
                        Statement st = connectOracle.conn.createStatement();
                        try (ResultSet rs = st.executeQuery(jobName)) {
                            if (rs.next()) {
                                jobID = rs.getInt(1);
                            }
                            rs.close();
                        }

                    } catch (SQLException ex) {
                        Logger.getLogger(ALL.class.getName()).log(Level.SEVERE, null, ex);
                    }

                    break;
            }

            if (x == 2) {
                exec += Integer.toString(jobID) + "' where \"e_name\" = '" + check + "'";
            } else {
                exec += updateInfoEmpText.getText() + "' where \"e_name\" = '" + check + "'";
            }

            System.out.println(exec);

            try {
                Statement st = connectOracle.conn.createStatement();
                st.executeUpdate(exec);
            } catch (SQLException ex) {
                Logger.getLogger(ALL.class.getName()).log(Level.SEVERE, null, ex);
            }

        }

        updateCondEmpName.setText("");
        updateInfoEmpText.setText("");
    }//GEN-LAST:event_submitUEmpActionPerformed

    private void submitUFoodActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitUFoodActionPerformed
        // TODO add your handling code here:
        String check, exec = "update \"rFoodItem\" SET ";
        check = updateCondFoodName.getText();
        if (check.length() == 0) {
            JOptionPane.showMessageDialog(this, "Please enter Food Item's name.");
        } else {
            int x = updateInfoFood.getSelectedIndex();
            if (x == 0) {
                exec += "\"food_price\" = '";
            } else {
                exec += "\"food_price\" =  \"food_price\"  + '";
            }
            //else if (updateInfoEmp.getSelectedIndex()==2) exec +=

            if (updateInfoFoodText.getText().length() > 0) {
                exec += updateInfoFoodText.getText() + "' where \"food_name\" = '" + check + "'";

                System.out.println(exec);

                try {
                    Statement st;
                    st = connectOracle.conn.createStatement();
                    st.executeUpdate(exec);
                } catch (SQLException ex) {
                    Logger.getLogger(ALL.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else {
                JOptionPane.showMessageDialog(this, "Please enter a price.");
            }
        }

        updateCondFoodName.setText("");
        updateInfoFoodText.setText("");
    }//GEN-LAST:event_submitUFoodActionPerformed

    private void backUFoodActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backUFoodActionPerformed
        // TODO add your handling code here:
        updateFormFood.setEnabled(false);
        updateFormFood.setVisible(false);
        switch (curDepartment) {
            case -1:
                options.setEnabled(true);
                options.setVisible(true);
                break;
            case 1000:
                optionsKitchen.setEnabled(true);
                optionsKitchen.setVisible(true);
                break;
            case 2000:
                optionsWaitStuff.setEnabled(true);
                optionsWaitStuff.setVisible(true);
                break;
            case 3000:
                optionsManagement.setEnabled(true);
                optionsManagement.setVisible(true);
                break;
            default:
                break;
        }
        updateCondFoodName.setText("");
        updateInfoFoodText.setText("");
    }//GEN-LAST:event_backUFoodActionPerformed

    private void submitUJobActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitUJobActionPerformed
        // TODO add your handling code here:
        String check, exec = "update \"rJob\" SET ";
        check = updateCondJobName.getText();
        if (check.length() == 0) {
            JOptionPane.showMessageDialog(this, "Please enter Job's name.");
        } else {
            int x = updateInfoJob.getSelectedIndex();
            if (x == 0) {
                exec += "\"salary\" = '";
            } else {
                exec += "\"salary\" =  \"salary\"  + '";
            }
            //else if (updateInfoEmp.getSelectedIndex()==2) exec +=

            if (updateInfoJobText.getText().length() > 0) {
                exec += updateInfoJobText.getText() + "' where \"job_name\" = '" + check + "'";

                System.out.println(exec);

                try {
                    Statement st;
                    st = connectOracle.conn.createStatement();
                    st.executeUpdate(exec);
                } catch (SQLException ex) {
                    Logger.getLogger(ALL.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else {
                JOptionPane.showMessageDialog(this, "Please enter a salary.");
            }
        }

        updateCondJobName.setText("");
        updateInfoJobText.setText("");
    }//GEN-LAST:event_submitUJobActionPerformed

    private void backUJobActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backUJobActionPerformed
        // TODO add your handling code here:
        updateFormJob.setEnabled(false);
        updateFormJob.setVisible(false);
        switch (curDepartment) {
            case -1:
                options.setEnabled(true);
                options.setVisible(true);
                break;
            case 1000:
                optionsKitchen.setEnabled(true);
                optionsKitchen.setVisible(true);
                break;
            case 2000:
                optionsWaitStuff.setEnabled(true);
                optionsWaitStuff.setVisible(true);
                break;
            case 3000:
                optionsManagement.setEnabled(true);
                optionsManagement.setVisible(true);
                break;
            default:
                break;
        }
        updateCondJobName.setText("");
        updateInfoJobText.setText("");
    }//GEN-LAST:event_backUJobActionPerformed

    private void showCrditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showCrditActionPerformed
        // TODO add your handling code here:
        Credits credit = new Credits();
        credit.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        credit.pack();
        credit.setVisible(true);
    }//GEN-LAST:event_showCrditActionPerformed

    private void changePassActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changePassActionPerformed
        // TODO add your handling code here:
        options.setEnabled(false);
        options.setVisible(false);

        changePasswordForm.setEnabled(true);
        changePasswordForm.setVisible(true);
    }//GEN-LAST:event_changePassActionPerformed

    private void backPassActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backPassActionPerformed
        // TODO add your handling code here:
        changePasswordForm.setEnabled(false);
        changePasswordForm.setVisible(false);
        switch (curDepartment) {
            case -1:
                options.setEnabled(true);
                options.setVisible(true);
                break;
            case 1000:
                optionsKitchen.setEnabled(true);
                optionsKitchen.setVisible(true);
                break;
            case 2000:
                optionsWaitStuff.setEnabled(true);
                optionsWaitStuff.setVisible(true);
                break;
            case 3000:
                optionsManagement.setEnabled(true);
                optionsManagement.setVisible(true);
                break;
            default:
                break;
        }

        curPassword.setText("");
        newPassword.setText("");
    }//GEN-LAST:event_backPassActionPerformed

    private void submitPassActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitPassActionPerformed
        // TODO add your handling code here:
        String exec;

        if (curPassword.getText().length() > 0 && newPassword.getText().length() > 0) {
            if (curDepartment != -1) {
                exec = "select checkPassword('" + curUserName + "', '" + curPassword.getText() + "') from dual";
            } else {
                exec = "select \"password\" from \"rAdmin\" where \"username\" = '" + curUserName + "'";
            }
            int ok = 0;
            try {
                Statement st = connectOracle.conn.createStatement();
                try (ResultSet rs = st.executeQuery(exec)) {
                    if (rs.next()) {
                        ok = rs.getInt(1);
                        if (curDepartment == -1) {
                            if (ok == Integer.parseInt(curPassword.getText())) {
                                ok = 1;
                            } else {
                                ok = 0;
                            }
                        }
                    }
                    rs.close();
                }

            } catch (SQLException ex) {
                Logger.getLogger(ALL.class.getName()).log(Level.SEVERE, null, ex);
            }

            System.out.println(ok);
            //exec = "exec changePassword('" + curUserName + "', '" + newPassword.getText() + "')";

            if (ok == 1) {
                try {
                    CallableStatement stmt = connectOracle.conn.prepareCall(("begin  changePassword(?, ?, ?); end;"));

                    System.out.println("" + curDepartment + "'" + curUserName + "'" + "'" + newPassword.getText() + "'");
                    stmt.setInt(1, curDepartment);
                    stmt.setString(2, curUserName);
                    stmt.setString(3, newPassword.getText());

                    stmt.execute();
                    stmt.close();
                } catch (SQLException ex) {
                    Logger.getLogger(ALL.class.getName()).log(Level.SEVERE, null, ex);
                }
                JOptionPane.showMessageDialog(this, "Password successfully changed.");
            } else {
                JOptionPane.showMessageDialog(this, "Please insert current password correctly.");
            }
        }
        
        else{
            JOptionPane.showMessageDialog(this, "One or more field(s) empty.");
        }

        curPassword.setText("");
        newPassword.setText("");
    }//GEN-LAST:event_submitPassActionPerformed

    private void chPasswordManActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chPasswordManActionPerformed
        // TODO add your handling code here:
        optionsManagement.setEnabled(false);
        optionsManagement.setVisible(false);

        changePasswordForm.setEnabled(true);
        changePasswordForm.setVisible(true);
    }//GEN-LAST:event_chPasswordManActionPerformed

    private void chPasswordWSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chPasswordWSActionPerformed
        // TODO add your handling code here:
        optionsWaitStuff.setEnabled(false);
        optionsWaitStuff.setVisible(false);

        changePasswordForm.setEnabled(true);
        changePasswordForm.setVisible(true);
    }//GEN-LAST:event_chPasswordWSActionPerformed

    private void chPasswordKitchenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chPasswordKitchenActionPerformed
        // TODO add your handling code here:
        optionsKitchen.setEnabled(false);
        optionsKitchen.setVisible(false);

        changePasswordForm.setEnabled(true);
        changePasswordForm.setVisible(true);
    }//GEN-LAST:event_chPasswordKitchenActionPerformed

    private void submitIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitIActionPerformed
        // TODO add your handling code here:
        int curItemID = 0;

        String query = "Select max(\"item_id\") from \"rItem\"";

        try {
            Statement st = connectOracle.conn.createStatement();
            try (ResultSet rs = st.executeQuery(query)) {
                if (rs.next()) {
                    curItemID = rs.getInt(1);
                }
                rs.close();
            }

        } catch (SQLException ex) {
            Logger.getLogger(ALL.class.getName()).log(Level.SEVERE, null, ex);
        }

        curItemID++;

        String item_id = Integer.toString(curItemID);
        String item_name = item_name_text.getText();
        String item_price = item_price_text.getText();
        String item_quantity = item_quantity_text.getText();
        String item_dept_name = itemDeptChoice.getItemAt(itemDeptChoice.getSelectedIndex()).toString();
        int dept_id = 0;

        query = "select \"dept_id\" from \"rDepartment\" where \"dept_name\" = '" + item_dept_name + "'";

        try {
            Statement st = connectOracle.conn.createStatement();
            try (ResultSet rs = st.executeQuery(query)) {
                if (rs.next()) {
                    dept_id = rs.getInt(1);
                }
                rs.close();
            }

        } catch (SQLException ex) {
            Logger.getLogger(ALL.class.getName()).log(Level.SEVERE, null, ex);
        }

        /*String iAdmin_id;
        
        query = "select \"admin_id\" from \"rAdmin\" where \"username\" = '" + curUserName + "'";
        
        try {
            Statement st = connectOracle.conn.createStatement();
            try (ResultSet rs = st.executeQuery(query)) {
                if (rs.next()) {
                    iAdmin_id = rs.getString(1);
                }
                rs.close();
            }

        } catch (SQLException ex) {
            Logger.getLogger(ALL.class.getName()).log(Level.SEVERE, null, ex);
        }*/
//String getDate = ""; 
        if (item_id.length() == 0 || item_name.length() == 0 || item_price.length() == 0 || item_quantity.length() == 0) {
            JOptionPane.showMessageDialog(this, "One or more Field(s) Empty.");
        } else {
            String INS = "insert into \"rItem\" values (" + item_id + ',' + "'" + item_name + "'," + "'"
                    + item_quantity + "'," + "'" + dept_id + "'," + item_price + ")";
            System.out.println(INS);
            boolean inserted = true;
            try {
                Statement st = connectOracle.conn.createStatement();
                st.executeUpdate(INS);
            } catch (SQLException ex) {
                inserted = false;
                Logger.getLogger(ALL.class.getName()).log(Level.SEVERE, null, ex);
            }
            if (inserted) {
                System.out.println("Record inserted in rItem table");
                item_name_text.setText("");
                item_price_text.setText("");
                item_quantity_text.setText("");
                JOptionPane.showMessageDialog(this, "Data inserted successfully.");
            } else {
                System.out.println("Error in insertion");
                inserted = true;
            }
        }

    }//GEN-LAST:event_submitIActionPerformed

    private void backIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backIActionPerformed
        // TODO add your handling code here:
        insertFormItem.setEnabled(false);
        insertFormItem.setVisible(false);
        options.setEnabled(true);
        options.setVisible(true);
    }//GEN-LAST:event_backIActionPerformed

    private void deleteIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteIActionPerformed
        // TODO add your handling code here:
        String delItem = i_name_del.getText();

        boolean got = false;

        String del = "delete from \"rItem\" where ";

        if (delItem.length() != 0) {
            if (!got) {
                got = true;
                del += "\"item_name\" = '" + delItem + "'";
            } else {
                del += " and \"item_name\" = '" + delItem + "'";
            }
        }
        System.out.println(del);

        boolean deleted = true;
        if (got) {
            try {
                Statement st = connectOracle.conn.createStatement();
                st.executeUpdate(del);
            } catch (SQLException ex) {
                deleted = false;
                Logger.getLogger(ALL.class.getName()).log(Level.SEVERE, null, ex);
            }

            if (deleted) {
                System.out.println("Record deleted");
                i_name_del.setText("");
            } else {
                System.out.println("Error in deletion");
                deleted = true;
            }
        } else {
            JOptionPane.showMessageDialog(this, "Field Empty.");
        }

    }//GEN-LAST:event_deleteIActionPerformed

    private void back_delIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_back_delIActionPerformed
        // TODO add your handling code here:
        deleteFormItem.setEnabled(false);
        deleteFormItem.setVisible(false);
        options.setEnabled(true);
        options.setVisible(true);
    }//GEN-LAST:event_back_delIActionPerformed

    private void addCondItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addCondItemActionPerformed
        // TODO add your handling code here:
        if (QitemInput.getText().length() > 0) {
            String test = null;
            if (extremeQuerySuffix.length() == 0) {
                extremeQuerySuffix = " where ";
            }
            if (queryAnd) {
                extremeQuerySuffix += " and ";
            } else {
                queryAnd = true;
            }

            int index = condQItem.getSelectedIndex();
            int dept_id = 0;

            switch (index) {
                case 0:
                    test = "\"item_id\"";
                    break;
                case 1:
                    test = "\"item_name\"";
                    break;
                case 2:
                    String query = "select \"dept_id\" from \"rDepartment\" where \"dept_name\" = '" + QitemInput.getText() + "'";
                    try {
                        Statement st = connectOracle.conn.createStatement();
                        try (ResultSet rs = st.executeQuery(query)) {
                            if (rs.next()) {
                                dept_id = rs.getInt(1);
                            }
                            rs.close();
                        }

                    } catch (SQLException ex) {
                        Logger.getLogger(ALL.class.getName()).log(Level.SEVERE, null, ex);
                    }

                    test = "\"dept_id\"";
                    break;
                default:
                    break;
            }

            if (index == 2) {
                extremeQuerySuffix += test + " = " + "'" + dept_id + "'";
            } else {
                extremeQuerySuffix += test + " = " + "'" + QitemInput.getText() + "'";
            }

        }

        System.out.println(extremeQuerySuffix);

        QitemInput.setText("");
        condRelQfood.setSelectedIndex(0);

    }//GEN-LAST:event_addCondItemActionPerformed

    private void showQitemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showQitemActionPerformed
        // TODO add your handling code here:
        boolean first = true;
        int col = 0;

        ArrayList<String> columnName = new ArrayList<>();
        extremeQueryPrefix = "select ";

        if (item_id.isSelected()) {

            columnName.add("Item ID");
            col++;
            if (!first) {
                extremeQueryPrefix += ", \"item_id\"";
            } else {
                extremeQueryPrefix += "\"item_id\"";
                first = false;
            }
        }

        if (item_name.isSelected()) {

            columnName.add("Name");
            col++;
            if (!first) {
                extremeQueryPrefix += ", \"item_name\"";
            } else {
                extremeQueryPrefix += "\"item_name\"";
                first = false;
            }
        }

        if (item_quantity.isSelected()) {

            columnName.add("Quantity");
            col++;
            if (!first) {
                extremeQueryPrefix += ", \"item_current_quantity\"";
            } else {
                extremeQueryPrefix += "\"item_current_quantity\"";
                first = false;
            }
        }

        if (item_price.isSelected()) {

            columnName.add("Unit Price");
            col++;
            if (!first) {
                extremeQueryPrefix += ", \"item_price\"";
            } else {
                extremeQueryPrefix += "\"item_price\"";
                first = false;
            }
        }

        if (item_dept.isSelected()) {

            columnName.add("Department Name");
            col++;

            if (!first) {
                extremeQueryPrefix += ", getDeptName(\"dept_id\")";
            } else {
                extremeQueryPrefix += " getDeptName(\"dept_id\")";
                first = false;
            }
        }

        ArrayList< ArrayList<String>> data = new ArrayList<>();
        ArrayList<String> rowData = new ArrayList<>();

        if (col == 0) {
            System.out.println("Please check the fields you want to see.");
        } else {
            extremeQuery = extremeQueryPrefix + " from \"rItem\" " + extremeQuerySuffix;

            System.out.println(extremeQuery);

            try {
                Statement st = connectOracle.conn.createStatement();
                try (ResultSet rs = st.executeQuery(extremeQuery)) {
                    //int rowCount = 0;
                    while (rs.next()) {
                        for (int i = 1; i <= col; i++) {
                            //System.out.print(rs.getString(i) + " ");
                            rowData.add(rs.getString(i));
                            //System.out.println(rowData.get(i-1));
                        }

                        data.add((ArrayList<String>) rowData.clone());
                        //System.out.println("");

                        rowData.clear();
                    }
                    rs.close();
                }

            } catch (SQLException ex) {
                Logger.getLogger(ALL.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        for (int i = 0; i < data.size(); i++) {
            for (int j = 0; j < 1; j++) {
                System.out.println(data.get(i).get(j));
            }
            //System.out.println(data.get(i).size());
        }

        String[][] send = new String[data.size()][col];
        for (int i = 0; i < data.size(); i++) {
            for (int j = 0; j < col; j++) {
                send[i][j] = data.get(i).get(j);
            }
        }

        String[] sendCol = new String[columnName.size()];
        sendCol = columnName.toArray(sendCol);

        System.out.println(Arrays.toString(sendCol));

        queryResult result = new queryResult(send, sendCol);
        result.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        result.pack();
        result.setVisible(true);

        item_id.setSelected(false);
        item_name.setSelected(false);
        item_quantity.setSelected(false);
        item_price.setSelected(false);
        item_dept.setSelected(false);

        extremeQuery = "";
        extremeQueryPrefix = "";
        extremeQuerySuffix = "";

        queryAnd = false;
    }//GEN-LAST:event_showQitemActionPerformed

    private void backQitemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backQitemActionPerformed
        // TODO add your handling code here:
        QitemInput.setText("");
        queryFormItem.setEnabled(false);
        queryFormItem.setVisible(false);

        switch (curDepartment) {
            case -1:
                options.setEnabled(true);
                options.setVisible(true);
                break;
            case 1000:
                optionsKitchen.setEnabled(true);
                optionsKitchen.setVisible(true);
                break;
            case 2000:
                optionsWaitStuff.setEnabled(true);
                optionsWaitStuff.setVisible(true);
                break;
            case 3000:
                optionsManagement.setEnabled(true);
                optionsManagement.setVisible(true);
                break;
            default:
                break;
        }

        item_id.setSelected(false);
        item_name.setSelected(false);
        item_price.setSelected(false);
        item_dept.setSelected(false);
    }//GEN-LAST:event_backQitemActionPerformed

    private void submitUItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitUItemActionPerformed
        // TODO add your handling code here:
        String check, exec = "update \"rItem\" SET ";
        check = updateCondItemName.getText();
        if (check.length() == 0) {
            JOptionPane.showMessageDialog(this, "Please enter Item's name.");
        } else {
            int x = updateQuantityItem.getSelectedIndex();
            if (x == 0) {
                exec += "\"item_current_quantity\" = '";
            } else {
                exec += "\"item_current_quantity\" =  \"item_current_quantity\"  + '";
            }
            //else if (updateInfoEmp.getSelectedIndex()==2) exec +=

            if (updateQuantityText.getText().length() > 0) {
                exec += updateQuantityText.getText() + "' where \"item_name\" = '" + check + "'";

                System.out.println(exec);

                try {
                    Statement st;
                    st = connectOracle.conn.createStatement();
                    st.executeUpdate(exec);
                } catch (SQLException ex) {
                    Logger.getLogger(ALL.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else {
                JOptionPane.showMessageDialog(this, "Please enter a price.");
            }
        }

        updateCondItemName.setText("");
        updateQuantityText.setText("");
    }//GEN-LAST:event_submitUItemActionPerformed

    private void backUItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backUItemActionPerformed
        // TODO add your handling code here:
        updateFormItem.setEnabled(false);
        updateFormItem.setVisible(false);
        switch (curDepartment) {
            case -1:
                options.setEnabled(true);
                options.setVisible(true);
                break;
            case 1000:
                optionsKitchen.setEnabled(true);
                optionsKitchen.setVisible(true);
                break;
            case 2000:
                optionsWaitStuff.setEnabled(true);
                optionsWaitStuff.setVisible(true);
                break;
            case 3000:
                optionsManagement.setEnabled(true);
                optionsManagement.setVisible(true);
                break;
            default:
                break;
        }
        updateCondItemName.setText("");
        updateQuantityText.setText("");
    }//GEN-LAST:event_backUItemActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ALL.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ALL.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ALL.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ALL.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new ALL().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox F_category;
    private javax.swing.JCheckBox F_id;
    private javax.swing.JCheckBox F_name;
    private javax.swing.JCheckBox F_price;
    private javax.swing.JButton LogOut;
    private javax.swing.JButton LogOutKitchen;
    private javax.swing.JButton LogOutManagement;
    private javax.swing.JButton LogOutWaitStuff;
    private javax.swing.JTextField QbillInput;
    private javax.swing.JTextField QempInput;
    private javax.swing.JTextField QfoodInput;
    private javax.swing.JTextField QitemInput;
    private javax.swing.JButton ViewLogs;
    private javax.swing.JButton addB;
    private javax.swing.JButton addCondBill;
    private javax.swing.JButton addCondFood;
    private javax.swing.JButton addCondItem;
    private javax.swing.JButton addCondQemp;
    private javax.swing.JTextField address;
    private javax.swing.JTextField amount;
    private javax.swing.JComboBox<String> assignJob;
    private javax.swing.JButton backB;
    private javax.swing.JButton backDelB;
    private javax.swing.JButton backDelBill;
    private javax.swing.JButton backE;
    private javax.swing.JButton backF;
    private javax.swing.JButton backI;
    private javax.swing.JButton backPass;
    private javax.swing.JButton backQbill;
    private javax.swing.JButton backQemp;
    private javax.swing.JButton backQfood;
    private javax.swing.JButton backQitem;
    private javax.swing.JButton backUEmp;
    private javax.swing.JButton backUFood;
    private javax.swing.JButton backUItem;
    private javax.swing.JButton backUJob;
    private javax.swing.JButton back_delE;
    private javax.swing.JButton back_delF;
    private javax.swing.JButton back_delI;
    private javax.swing.JTextField billID;
    private javax.swing.JCheckBox brief;
    private javax.swing.JTextField category;
    private javax.swing.JButton chPasswordKitchen;
    private javax.swing.JButton chPasswordMan;
    private javax.swing.JButton chPasswordWS;
    private javax.swing.JButton changePass;
    private javax.swing.JPanel changePasswordForm;
    private javax.swing.JComboBox<String> condQItem;
    private javax.swing.JComboBox<String> condQbill;
    private javax.swing.JComboBox<String> condQemp;
    private javax.swing.JComboBox<String> condQfood;
    private javax.swing.JComboBox<String> condRelQbill;
    private javax.swing.JComboBox<String> condRelQemp;
    private javax.swing.JComboBox<String> condRelQfood;
    private javax.swing.JTextField contactNO;
    private javax.swing.JPasswordField curPassword;
    private javax.swing.JComboBox<String> dayB;
    private javax.swing.JComboBox<String> delete;
    private javax.swing.JButton deleteE;
    private javax.swing.JButton deleteF;
    private javax.swing.JPanel deleteFormBills;
    private javax.swing.JPanel deleteFormEmp;
    private javax.swing.JPanel deleteFormFood;
    private javax.swing.JPanel deleteFormItem;
    private javax.swing.JButton deleteI;
    private javax.swing.JComboBox<String> deleteKitchen;
    private javax.swing.JComboBox<String> deleteManagement;
    private javax.swing.JComboBox<String> deleteWaitStuff;
    private javax.swing.JTextField departmentName_del;
    private javax.swing.JComboBox<String> dept_name_admin;
    private javax.swing.JCheckBox details;
    private javax.swing.JTextField e_id_del;
    private javax.swing.JTextField e_name;
    private javax.swing.JTextField e_name_del;
    private javax.swing.JCheckBox emp_address;
    private javax.swing.JCheckBox emp_contactno;
    private javax.swing.JCheckBox emp_dept_name;
    private javax.swing.JCheckBox emp_hire_date;
    private javax.swing.JCheckBox emp_id;
    private javax.swing.JCheckBox emp_job_name;
    private javax.swing.JCheckBox emp_manager_name;
    private javax.swing.JCheckBox emp_name;
    private javax.swing.JCheckBox emp_sal;
    private javax.swing.JTextField f_id_del;
    private javax.swing.JTextField f_name;
    private javax.swing.JTextField f_name_del;
    private javax.swing.JTextField f_price;
    private javax.swing.JLabel getDepartment;
    private javax.swing.JTextField i_name_del;
    private javax.swing.JComboBox<String> insert;
    private javax.swing.JPanel insertFormBills;
    private javax.swing.JPanel insertFormEmp;
    private javax.swing.JPanel insertFormFood;
    private javax.swing.JPanel insertFormItem;
    private javax.swing.JComboBox<String> insertKitchen;
    private javax.swing.JComboBox<String> insertManagement;
    private javax.swing.JComboBox<String> insertWaitStuff;
    private javax.swing.JCheckBox isAdmin;
    private javax.swing.JComboBox<String> item;
    private javax.swing.JComboBox<String> itemDeptChoice;
    private javax.swing.JCheckBox item_dept;
    private javax.swing.JCheckBox item_id;
    private javax.swing.JCheckBox item_name;
    private javax.swing.JTextField item_name_text;
    private javax.swing.JCheckBox item_price;
    private javax.swing.JTextField item_price_text;
    private javax.swing.JCheckBox item_quantity;
    private javax.swing.JTextField item_quantity_text;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel44;
    private javax.swing.JLabel jLabel45;
    private javax.swing.JLabel jLabel46;
    private javax.swing.JLabel jLabel47;
    private javax.swing.JLabel jLabel48;
    private javax.swing.JLabel jLabel49;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel50;
    private javax.swing.JLabel jLabel51;
    private javax.swing.JLabel jLabel52;
    private javax.swing.JLabel jLabel53;
    private javax.swing.JLabel jLabel54;
    private javax.swing.JLabel jLabel55;
    private javax.swing.JLabel jLabel56;
    private javax.swing.JLabel jLabel57;
    private javax.swing.JLabel jLabel58;
    private javax.swing.JLabel jLabel59;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JTextField jobName_del;
    private javax.swing.JButton login;
    private javax.swing.JPanel loginForm;
    private javax.swing.JComboBox<String> monB;
    private javax.swing.JPasswordField newPassword;
    private javax.swing.JPanel options;
    private javax.swing.JPanel optionsKitchen;
    private javax.swing.JPanel optionsManagement;
    private javax.swing.JPanel optionsWaitStuff;
    private javax.swing.JPasswordField password;
    private javax.swing.JComboBox<String> prevIncome;
    private javax.swing.JComboBox<String> query;
    private javax.swing.JPanel queryFormBill;
    private javax.swing.JPanel queryFormEmp;
    private javax.swing.JPanel queryFormFood;
    private javax.swing.JPanel queryFormItem;
    private javax.swing.JComboBox<String> queryKitchen;
    private javax.swing.JComboBox<String> queryManagement;
    private javax.swing.JComboBox<String> queryWaitStuff;
    private javax.swing.JButton showCrdit;
    private javax.swing.JButton showQbill;
    private javax.swing.JButton showQemp;
    private javax.swing.JButton showQfood;
    private javax.swing.JButton showQitem;
    private javax.swing.JButton submitB;
    private javax.swing.JButton submitE;
    private javax.swing.JButton submitF;
    private javax.swing.JButton submitI;
    private javax.swing.JButton submitPass;
    private javax.swing.JButton submitUEmp;
    private javax.swing.JButton submitUFood;
    private javax.swing.JButton submitUItem;
    private javax.swing.JButton submitUJob;
    private javax.swing.JComboBox<String> update;
    private javax.swing.JTextField updateCondEmpName;
    private javax.swing.JTextField updateCondFoodName;
    private javax.swing.JTextField updateCondItemName;
    private javax.swing.JTextField updateCondJobName;
    private javax.swing.JPanel updateFormEmp;
    private javax.swing.JPanel updateFormFood;
    private javax.swing.JPanel updateFormItem;
    private javax.swing.JPanel updateFormJob;
    private javax.swing.JComboBox<String> updateInfoEmp;
    private javax.swing.JTextField updateInfoEmpText;
    private javax.swing.JComboBox<String> updateInfoFood;
    private javax.swing.JTextField updateInfoFoodText;
    private javax.swing.JComboBox<String> updateInfoJob;
    private javax.swing.JTextField updateInfoJobText;
    private javax.swing.JComboBox<String> updateKitchen;
    private javax.swing.JComboBox<String> updateManagement;
    private javax.swing.JComboBox<String> updateQuantityItem;
    private javax.swing.JTextField updateQuantityText;
    private javax.swing.JComboBox<String> updateWaitStuff;
    private javax.swing.JTextField username;
    private javax.swing.JComboBox<String> yearB;
    // End of variables declaration//GEN-END:variables
}
